"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Wildberries API V2
"""
import asyncio
import json
import sys
import logging
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from stock_tracker.api.client import WildberriesAPIClient
from stock_tracker.utils.config import get_config

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)8s] %(name)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)


async def debug_v2_structure():
    """–ü–æ–ª—É—á–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö V2 API"""
    
    print("=" * 80)
    print("–û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• WILDBERRIES API V2")
    print("=" * 80)
    
    # Initialize client
    client = WildberriesAPIClient()
    
    try:
        print("\n1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API v2...")
        
        # Get first 5 products
        response = await client.get_product_stock_data(limit=5, offset=0)
        
        print(f"\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
        print(json.dumps(response, indent=2, ensure_ascii=False))
        
        # Check data structure
        if 'data' in response:
            data = response['data']
            items = data.get('items', [])
            total_count = data.get('totalCount', 0)
        else:
            items = response.get('items', [])
            total_count = response.get('totalCount', 0)
        
        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {total_count}")
        
        if not items:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # Analyze first item structure
        first_item = items[0]
        
        print("\n" + "=" * 80)
        print("–°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ô –ó–ê–ü–ò–°–ò:")
        print("=" * 80)
        print(json.dumps(first_item, indent=2, ensure_ascii=False))
        
        print("\n" + "=" * 80)
        print("–ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô:")
        print("=" * 80)
        
        # Top level fields
        print("\nüìã –ü–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:")
        for key, value in first_item.items():
            value_type = type(value).__name__
            if isinstance(value, list):
                print(f"  - {key}: {value_type} ({len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            elif isinstance(value, dict):
                print(f"  - {key}: {value_type} (–∫–ª—é—á–∏: {', '.join(value.keys())})")
            else:
                print(f"  - {key}: {value_type}")
        
        # Check for orders/stock fields
        print("\n" + "=" * 80)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô:")
        print("=" * 80)
        
        fields_to_check = [
            'orders', 'ordersCount', 'ordersAmount', 'ordersQuantity',
            'stock', 'stockCount', 'stockAmount', 'stockQuantity',
            'warehouses', 'warehouseStock', 'warehouseOrders',
            'sales', 'salesCount', 'salesAmount'
        ]
        
        found_fields = []
        for field in fields_to_check:
            if field in first_item:
                value = first_item[field]
                value_type = type(value).__name__
                if isinstance(value, (list, dict)):
                    found_fields.append((field, value_type, len(value) if isinstance(value, list) else 'dict'))
                else:
                    found_fields.append((field, value_type, value))
                print(f"  ‚úÖ {field}: {value_type} = {value if not isinstance(value, (list, dict)) else f'{len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤' if isinstance(value, list) else 'dict'}")
            else:
                print(f"  ‚ùå {field}: –ù–ï–¢")
        
        # Analyze warehouses structure if present
        if 'warehouses' in first_item and isinstance(first_item['warehouses'], list) and first_item['warehouses']:
            print("\n" + "=" * 80)
            print("üè≠ –°–¢–†–£–ö–¢–£–†–ê –°–ö–õ–ê–î–û–í:")
            print("=" * 80)
            
            first_warehouse = first_item['warehouses'][0]
            print("\n–ü–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞:")
            for key, value in first_warehouse.items():
                value_type = type(value).__name__
                print(f"  - {key}: {value_type} = {value}")
        
        # Save to file
        output_file = Path(__file__).parent / "api_v2_structure_debug.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                'totalCount': total_count,
                'items': items[:3]  # Save first 3 items
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file.name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return
    
    print("\n" + "=" * 80)
    print("–û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(debug_v2_structure())
