#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö WB –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Stock Tracker
"""
import pandas as pd
import json
from collections import defaultdict

def analyze_wb_csv(csv_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ WB"""
    print("üîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• WILDBERRIES")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    df = pd.read_csv(csv_path, encoding='utf-8', sep=',', skiprows=1)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {len(df)}")
    print(f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞, –°–∫–ª–∞–¥, –û—Å—Ç–∞—Ç–∫–∏, –ó–∞–∫–∞–∑—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
    warehouses = df['–°–∫–ª–∞–¥'].value_counts()
    print(f"\nüè≠ –ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í:")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
    print("–¢–æ–ø-10 —Å–∫–ª–∞–¥–æ–≤:")
    for warehouse, count in warehouses.head(10).items():
        print(f"  - {warehouse}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    marketplace_data = df[df['–°–∫–ª–∞–¥'] == '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å']
    print(f"\nüìç –°–ö–õ–ê–î '–ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°':")
    print(f"–ó–∞–ø–∏—Å–µ–π: {len(marketplace_data)}")
    
    if len(marketplace_data) > 0:
        marketplace_stock = marketplace_data['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç'].fillna(0).sum()
        marketplace_orders = marketplace_data['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'].fillna(0).sum()
        print(f"–û—Å—Ç–∞—Ç–∫–∏: {marketplace_stock:.0f} —à—Ç")
        print(f"–ó–∞–∫–∞–∑—ã: {marketplace_orders:.0f} —à—Ç")
        
        marketplace_articles = marketplace_data['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'].unique()
        print(f"–ê—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {len(marketplace_articles)}")
        for article in marketplace_articles:
            article_data = marketplace_data[marketplace_data['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'] == article]
            stock = article_data['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç'].fillna(0).sum()
            orders = article_data['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'].fillna(0).sum()
            print(f"  - {article}: {stock:.0f} –æ—Å—Ç–∞—Ç–∫–æ–≤, {orders:.0f} –∑–∞–∫–∞–∑–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ FBS —Ç–æ–≤–∞—Ä–æ–≤
    fbs_data = df[df['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'].str.contains('.FBS', na=False)]
    print(f"\nüéØ FBS –¢–û–í–ê–†–´:")
    print(f"FBS –∑–∞–ø–∏—Å–µ–π: {len(fbs_data)}")
    
    if len(fbs_data) > 0:
        fbs_stock = fbs_data['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç'].fillna(0).sum()
        fbs_orders = fbs_data['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'].fillna(0).sum()
        print(f"–û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ FBS: {fbs_stock:.0f} —à—Ç")
        print(f"–û–±—â–∏–µ –∑–∞–∫–∞–∑—ã FBS: {fbs_orders:.0f} —à—Ç")
        
        fbs_articles = fbs_data['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'].unique()
        for article in fbs_articles:
            article_data = fbs_data[fbs_data['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'] == article]
            stock = article_data['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç'].fillna(0).sum()
            orders = article_data['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'].fillna(0).sum()
            warehouses_for_article = article_data['–°–∫–ª–∞–¥'].unique()
            print(f"  - {article}: {stock:.0f} –æ—Å—Ç–∞—Ç–∫–æ–≤, {orders:.0f} –∑–∞–∫–∞–∑–æ–≤")
            print(f"    –°–∫–ª–∞–¥—ã: {', '.join(warehouses_for_article)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    print(f"\nüì¶ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ê–†–¢–ò–ö–£–õ–ê–ú:")
    grouped = df.groupby('–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞').agg({
        '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç': lambda x: x.fillna(0).sum(),
        '–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç': lambda x: x.fillna(0).sum(),
        '–°–∫–ª–∞–¥': lambda x: list(x.unique())
    }).reset_index()
    
    critical_issues = []
    for _, row in grouped.iterrows():
        article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']
        stock = row['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç']
        orders = row['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç']
        warehouses_list = row['–°–∫–ª–∞–¥']
        
        print(f"\nüìã {article}:")
        print(f"  –û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {stock:.0f} —à—Ç")
        print(f"  –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {orders:.0f} —à—Ç")
        print(f"  –°–∫–ª–∞–¥—ã ({len(warehouses_list)}): {', '.join(warehouses_list)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
        if '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' in warehouses_list:
            mp_data = df[(df['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'] == article) & (df['–°–∫–ª–∞–¥'] == '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')]
            mp_stock = mp_data['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç'].fillna(0).sum()
            mp_orders = mp_data['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'].fillna(0).sum()
            print(f"  ‚ö†Ô∏è  –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°: {mp_stock:.0f} –æ—Å—Ç–∞—Ç–∫–æ–≤, {mp_orders:.0f} –∑–∞–∫–∞–∑–æ–≤")
            
            # –ï—Å–ª–∏ –Ω–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
            if stock > 0 and mp_stock / stock > 0.3:  # –ë–æ–ª–µ–µ 30% –Ω–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                critical_issues.append({
                    'article': article,
                    'marketplace_stock': mp_stock,
                    'total_stock': stock,
                    'marketplace_percent': (mp_stock / stock * 100) if stock > 0 else 0
                })
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_data = {}
    for _, row in grouped.iterrows():
        article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']
        test_data[article] = {
            'stock': float(row['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç']),
            'orders': float(row['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç']),
            'warehouses': row['–°–∫–ª–∞–¥']
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('real_wb_test_data.json', 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüö® –ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (Marketplace > 30% –æ—Å—Ç–∞—Ç–∫–æ–≤):")
    for issue in critical_issues:
        print(f"  - {issue['article']}: {issue['marketplace_stock']:.0f} –∏–∑ {issue['total_stock']:.0f} ({issue['marketplace_percent']:.1f}%)")
    
    print(f"\nüíæ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'real_wb_test_data.json'")
    return test_data

if __name__ == "__main__":
    csv_path = r"c:\Users\miros\Downloads\24-10-2025-a-s-18-10-2025-po-24-10-2025_export.csv"
    analyze_wb_csv(csv_path)