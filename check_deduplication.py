"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Stock Tracker.
"""

import asyncio
from stock_tracker.database.sheets import GoogleSheetsClient
from stock_tracker.database.operations import SheetsOperations
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


# –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API
WB_REFERENCE = {
    "Its1_2_3/50g": {"orders": 7, "stock": 192},
    "Its2/50g": {"orders": 9, "stock": 132},
    "ItsSport2/50g": {"orders": 5, "stock": 185}
}


async def check_updated_products():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    print("\n" + "=" * 70)
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ó–ê–ö–ê–ó–û–í")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    sheets_client = GoogleSheetsClient("1baGNbGKDSvFA1Cghh08onoG9PDGnO19UFzXhdKC9Sho")
    operations = SheetsOperations(sheets_client)
    
    # –î–∞–µ–º API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets API quota...")
    await asyncio.sleep(60)
    
    try:
        print("\nüìä –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        products = await operations.read_all_products("1baGNbGKDSvFA1Cghh08onoG9PDGnO19UFzXhdKC9Sho")
        
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
        print("\n" + "=" * 70)
        
        issues_found = []
        success_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        for product in products:
            if product.seller_article in WB_REFERENCE:
                expected = WB_REFERENCE[product.seller_article]
                
                print(f"\nüîé {product.seller_article}")
                print(f"   üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product.total_stock}")
                print(f"   üìã –ó–∞–∫–∞–∑–æ–≤: {product.total_orders}")
                
                orders_match = product.total_orders == expected["orders"]
                stock_match = product.total_stock == expected["stock"]
                
                if orders_match and stock_match:
                    print(f"   ‚úÖ –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å WB API")
                    success_count += 1
                else:
                    issue = {
                        "article": product.seller_article,
                        "orders": {
                            "sheets": product.total_orders,
                            "wb": expected["orders"],
                            "match": orders_match
                        },
                        "stock": {
                            "sheets": product.total_stock,
                            "wb": expected["stock"],
                            "match": stock_match
                        }
                    }
                    issues_found.append(issue)
                    
                    if not orders_match:
                        diff = product.total_orders - expected["orders"]
                        pct = (diff / expected["orders"] * 100) if expected["orders"] > 0 else 0
                        print(f"   ‚ùå –ó–ê–ö–ê–ó–´: Sheets={product.total_orders}, WB={expected['orders']}, "
                              f"–†–∞–∑–Ω–∏—Ü–∞={diff:+d} ({pct:+.1f}%)")
                    
                    if not stock_match:
                        diff = product.total_stock - expected["stock"]
                        pct = (diff / expected["stock"] * 100) if expected["stock"] > 0 else 0
                        print(f"   ‚ö†Ô∏è  –û–°–¢–ê–¢–û–ö: Sheets={product.total_stock}, WB={expected['stock']}, "
                              f"–†–∞–∑–Ω–∏—Ü–∞={diff:+d} ({pct:+.1f}%)")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 70)
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: 3")
        print(f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å WB API: {success_count}/3")
        
        if issues_found:
            print(f"\n   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues_found)}")
            print("\nüìã –î–ï–¢–ê–õ–ò –ü–†–û–ë–õ–ï–ú:")
            for issue in issues_found:
                print(f"\n   ‚Ä¢ {issue['article']}:")
                if not issue['orders']['match']:
                    print(f"     - –ó–∞–∫–∞–∑—ã: {issue['orders']['sheets']} –≤–º–µ—Å—Ç–æ {issue['orders']['wb']}")
                if not issue['stock']['match']:
                    print(f"     - –û—Å—Ç–∞—Ç–æ–∫: {issue['stock']['sheets']} –≤–º–µ—Å—Ç–æ {issue['stock']['wb']}")
        else:
            print("\n   üéâ –í–°–ï –î–ê–ù–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´!")
            print("   ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
        print("\n" + "=" * 70)
        
        return len(issues_found) == 0
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(check_updated_products())
    exit(0 if success else 1)
