#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö API v2 –Ω–∞ 8-–∫–æ–ª–æ–Ω–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ Analytics API v2 –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø—è—Ç—Å—è –Ω–∞ 
–∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ 8 –∫–æ–ª–æ–Ω–æ–∫ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.api.client import create_wildberries_client
from stock_tracker.core.models import Product, Warehouse
from stock_tracker.core.formatter import ProductDataFormatter
from stock_tracker.database.structure import SheetsTableStructure
from stock_tracker.utils.config import get_config


def test_api_v2_data_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö API v2."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö API v2...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –æ—Ç–≤–µ—Ç API v2
    api_v2_item = {
        "nmID": 12345678,
        "supplierArticle": "WB001",
        "ordersCount": 95,
        "stockCount": 1107,
        "subjectID": 123,
        "brandName": "Test Brand",
        "tagID": 456,
        # –¥—Ä—É–≥–∏–µ –ø–æ–ª—è API v2...
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö API v2
    product = Product.from_api_v2_data(api_v2_item)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–ª–∞–¥—ã
    product.add_warehouse(Warehouse(name="–°–¶ –í–æ–ª–≥–æ–≥—Ä–∞–¥", orders=32, stock=654))
    product.add_warehouse(Warehouse(name="–°–¶ –ú–æ—Å–∫–≤–∞", orders=60, stock=453))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.seller_article} ({product.wildberries_article})")
    print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è API v2:")
    print(f"   - subject_id: {product.subject_id}")
    print(f"   - brand_name: {product.brand_name}")
    print(f"   - tag_id: {product.tag_id}")
    print(f"   - –°–∫–ª–∞–¥–æ–≤: {len(product.warehouses)}")
    
    return product


def test_table_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ 8 –∫–æ–ª–æ–Ω–æ–∫."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    columns = SheetsTableStructure.COLUMNS
    print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}")
    
    if len(columns) != 8:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 8 –∫–æ–ª–æ–Ω–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ {len(columns)}")
        return False
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫
    print("   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:")
    for i, col in enumerate(columns):
        print(f"   {chr(ord('A') + i)}: {col.header} ({col.key})")
    
    return True


def test_data_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    product = test_api_v2_data_structure()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Google Sheets
    formatter = ProductDataFormatter()
    row_data = formatter.format_product_for_sheets(product)
    
    print(f"‚úÖ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {len(row_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    if len(row_data) != 8:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(row_data)}")
        return False
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏
    print("   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏:")
    column_names = [
        "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞", "–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞", "–ó–∞–∫–∞–∑—ã (–≤—Å–µ–≥–æ)", 
        "–û—Å—Ç–∞—Ç–∫–∏ (–≤—Å–µ–≥–æ)", "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞",
        "–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞", "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ"
    ]
    
    for i, (name, value) in enumerate(zip(column_names, row_data)):
        print(f"   {chr(ord('A') + i)} - {name}: {repr(value)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è API v2 –ù–ï –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É
    row_str = str(row_data)
    if any(field in row_str for field in ["subject_id", "brand_name", "tag_id"]):
        print("‚ùå –û–®–ò–ë–ö–ê: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è API v2 –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã!")
        return False
    else:
        print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è API v2 –ù–ï –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã")
    
    return True


async def test_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API v2."""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API v2...")
    
    try:
        client = create_wildberries_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"   Base URL: {client.base_url}")
        print(f"   –ï—Å—Ç—å API –∫–ª—é—á: {bool(client.api_key)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = client.test_connection()
        
        if result["success"]:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API v2 —É—Å–ø–µ—à–Ω–æ")
            print(f"   API –≤–µ—Ä—Å–∏—è: {result['api_version']}")
            print(f"   Endpoint: {result['endpoint']}")
            print(f"   –ï—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {result['sample_data']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False
    finally:
        if 'client' in locals():
            client.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞ API v2 –Ω–∞ 8-–∫–æ–ª–æ–Ω–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    print("=" * 60)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã", test_table_structure),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_data_formatting),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", lambda: asyncio.run(test_api_connection()))
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if not result:
            all_passed = False
    
    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}")
    
    if all_passed:
        print("\n‚ú® –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:")
        print("   - API v2 –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø—è—Ç—Å—è –Ω–∞ 8 –∫–æ–ª–æ–Ω–æ–∫")
        print("   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è API v2 –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∏")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
    
    return all_passed


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)