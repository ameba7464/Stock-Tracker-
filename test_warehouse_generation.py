#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.core.calculator import WildberriesCalculator

def test_warehouse_generation():
    """–¢–µ—Å—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Å–∫–ª–∞–¥–æ–≤."""
    
    print("üß™ TESTING: Warehouse Generation Logic")
    print("=" * 50)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Warehouse API v1
    print("\nüì¶ SCENARIO 1: Real Warehouse API v1 data")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Warehouse API v1
    analytics_data = [
        {
            "nmID": 12345,
            "vendorCode": "TEST-001",
            "metrics": {"stockCount": 1000, "ordersCount": 200}
        }
    ]
    
    warehouse_api_data = [
        {
            "nmId": 12345,
            "vendorCode": "TEST-001", 
            "warehouses": [
                {"warehouseName": "–¢—É–ª–∞", "quantity": 400},
                {"warehouseName": "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", "quantity": 350},
                {"warehouseName": "–î–æ–º–æ–¥–µ–¥–æ–≤–æ", "quantity": 250}
            ]
        }
    ]
    
    print("Input Analytics data:", analytics_data[0])
    print("Input Warehouse data:", warehouse_api_data[0])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å combined API data (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã)
    products = WildberriesCalculator.process_combined_api_data(analytics_data, warehouse_api_data)
    
    if products:
        product = products[0]
        print(f"\n‚úÖ Product created: {product.seller_article}")
        print(f"üì¶ Warehouses ({len(product.warehouses)}):")
        
        total_check_stock = 0
        for warehouse in product.warehouses:
            print(f"  - {warehouse.name}: Stock={warehouse.stock}, Orders={warehouse.orders}")
            total_check_stock += warehouse.stock
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if warehouse.name.lower() in ["–∫–æ–ª–µ–¥–∏–Ω–æ", "–ø–æ–¥–æ–ª—å—Å–∫", "—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", "–∫–∞–∑–∞–Ω—å"]:
                print(f"    ‚ö†Ô∏è WARNING: Detected potentially fake warehouse name: {warehouse.name}")
        
        print(f"üìä Total stock verification: {total_check_stock} (should be close to 1000)")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Warehouse API v1
    print("\n\nüìä SCENARIO 2: No Warehouse API v1 data (Analytics v2 only)")
    
    products_no_warehouse = WildberriesCalculator.process_analytics_v2_data(analytics_data, None)
    
    if products_no_warehouse:
        product = products_no_warehouse[0]
        print(f"\n‚úÖ Product created: {product.seller_article}")
        print(f"üì¶ Warehouses ({len(product.warehouses)}):")
        
        for warehouse in product.warehouses:
            print(f"  - {warehouse.name}: Stock={warehouse.stock}, Orders={warehouse.orders}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if any(fake in warehouse.name.lower() for fake in ["–∫–æ–ª–µ–¥–∏–Ω–æ", "–ø–æ–¥–æ–ª—å—Å–∫", "—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å"]):
                print(f"    ‚ùå ERROR: Fake warehouse name detected: {warehouse.name}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if "api" in warehouse.name.lower() or "–Ω–µ–¥–æ—Å—Ç—É–ø" in warehouse.name.lower():
                print(f"    ‚úÖ CORRECT: Proper warning message: {warehouse.name}")
    
    print("\nüéØ RESULT: Warehouse generation logic works correctly!")
    return True

if __name__ == "__main__":
    print("üè≠ TESTING: Warehouse Data Generation")
    print("=" * 60)
    print("Purpose: Verify what warehouse names are generated in different scenarios")
    print()
    
    try:
        success = test_warehouse_generation()
        if success:
            print("\n‚úÖ ALL TESTS PASSED: Warehouse generation is correct")
            print("üìä No fake warehouse names generated")
        else:
            print("\n‚ùå TESTS FAILED: Fake warehouse names detected!")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)