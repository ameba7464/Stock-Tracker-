#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.core.calculator import WildberriesCalculator, debug_warehouse_data
from stock_tracker.api.products import extract_warehouse_data_from_response
from stock_tracker.api.warehouses import WarehouseDataProcessor


def test_complete_warehouse_filtering_pipeline():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"""
    print("üß™ Integration Test: Complete Warehouse Filtering Pipeline")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    raw_warehouse_data = [
        {
            "nmId": 123456,
            "supplierArticle": "TEST-PRODUCT-001",
            "vendorCode": "TEST-PRODUCT-001", 
            "brand": "Test Brand",
            "subjectName": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            "warehouses": [
                {"warehouseName": "–¢—É–ª–∞", "quantity": 150},
                {"warehouseName": "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", "quantity": 200},
                {"warehouseName": "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "quantity": 50},      # –§–ò–õ–¨–¢–†–£–ï–ú
                {"warehouseName": "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", "quantity": 400}, # –§–ò–õ–¨–¢–†–£–ï–ú
                {"warehouseName": "–ü–æ–¥–æ–ª—å—Å–∫ 3", "quantity": 75},
                {"warehouseName": "–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB", "quantity": 25}, # –§–ò–õ–¨–¢–†–£–ï–ú
                {"warehouseName": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "quantity": 100}
            ]
        },
        {
            "nmId": 789012,
            "supplierArticle": "TEST-PRODUCT-002",
            "vendorCode": "TEST-PRODUCT-002",
            "brand": "Another Brand", 
            "warehouses": [
                {"warehouseName": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", "quantity": 80},
                {"warehouseName": "–ö –¥–æ–ø–ª–∞—Ç–µ", "quantity": 10},                  # –§–ò–õ–¨–¢–†–£–ï–ú
                {"warehouseName": "–û–±—â–∏–π –∏—Ç–æ–≥", "quantity": 300},                # –§–ò–õ–¨–¢–†–£–ï–ú
                {"warehouseName": "–î–æ–º–æ–¥–µ–¥–æ–≤–æ", "quantity": 120}
            ]
        }
    ]
    
    raw_orders_data = [
        {"nmId": 123456, "supplierArticle": "TEST-PRODUCT-001", "warehouseName": "–¢—É–ª–∞"},
        {"nmId": 123456, "supplierArticle": "TEST-PRODUCT-001", "warehouseName": "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"},  # –§–ò–õ–¨–¢–†–£–ï–ú
        {"nmId": 123456, "supplierArticle": "TEST-PRODUCT-001", "warehouseName": "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã"},
        {"nmId": 123456, "supplierArticle": "TEST-PRODUCT-001", "warehouseName": "–ü–æ–¥–æ–ª—å—Å–∫ 3"},
        {"nmId": 789012, "supplierArticle": "TEST-PRODUCT-002", "warehouseName": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å"},
        {"nmId": 789012, "supplierArticle": "TEST-PRODUCT-002", "warehouseName": "–ö –¥–æ–ø–ª–∞—Ç–µ"},            # –§–ò–õ–¨–¢–†–£–ï–ú
        {"nmId": 789012, "supplierArticle": "TEST-PRODUCT-002", "warehouseName": "–î–æ–º–æ–¥–µ–¥–æ–≤–æ"}
    ]
    
    print("üîç Step 1: Debugging raw warehouse data...")
    debug_results = debug_warehouse_data(raw_warehouse_data, "Raw API Data")
    
    expected_real_warehouses = {"–¢—É–ª–∞", "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", "–ü–æ–¥–æ–ª—å—Å–∫ 3", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", "–î–æ–º–æ–¥–µ–¥–æ–≤–æ"}
    expected_delivery_statuses = {"–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", "–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB", "–ö –¥–æ–ø–ª–∞—Ç–µ", "–û–±—â–∏–π –∏—Ç–æ–≥"}
    
    print(f"\nüìä Expected real warehouses: {len(expected_real_warehouses)}")
    print(f"üìä Found real warehouses: {len(debug_results['real_warehouses'])}")
    print(f"üìä Expected delivery statuses: {len(expected_delivery_statuses)}")
    print(f"üìä Found delivery statuses: {len(debug_results['delivery_statuses'])}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    real_match = set(debug_results["real_warehouses"]) == expected_real_warehouses
    status_match = set(debug_results["delivery_statuses"]) == expected_delivery_statuses
    
    print(f"‚úÖ Real warehouses detection: {'PASS' if real_match else 'FAIL'}")
    print(f"‚úÖ Delivery statuses detection: {'PASS' if status_match else 'FAIL'}")
    
    if not (real_match and status_match):
        print("‚ùå Debugging failed!")
        return False
    
    print("\nüîç Step 2: Testing extract_warehouse_data_from_response...")
    flat_warehouse_data = extract_warehouse_data_from_response(raw_warehouse_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
    flat_warehouse_names = {item["warehouseName"] for item in flat_warehouse_data}
    
    print(f"üì¶ Warehouses in flat data: {flat_warehouse_names}")
    
    delivery_statuses_in_flat = flat_warehouse_names & expected_delivery_statuses
    if delivery_statuses_in_flat:
        print(f"‚ùå Found delivery statuses in flat data: {delivery_statuses_in_flat}")
        return False
    else:
        print("‚úÖ No delivery statuses in flat warehouse data")
    
    print("\nüîç Step 3: Testing WildberriesCalculator.group_data_by_product...")
    grouped_data = WildberriesCalculator.group_data_by_product(raw_warehouse_data, raw_orders_data)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    all_grouped_warehouses = set()
    for product_data in grouped_data.values():
        all_grouped_warehouses.update(product_data["warehouses"].keys())
    
    print(f"üì¶ Warehouses in grouped data: {all_grouped_warehouses}")
    
    delivery_statuses_in_grouped = all_grouped_warehouses & expected_delivery_statuses
    if delivery_statuses_in_grouped:
        print(f"‚ùå Found delivery statuses in grouped data: {delivery_statuses_in_grouped}")
        return False
    else:
        print("‚úÖ No delivery statuses in grouped data")
    
    print("\nüîç Step 4: Testing WildberriesCalculator.process_combined_api_data...")
    
    # –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ v2 –¥–ª—è combined API
    analytics_v2_data = [
        {
            "nmID": 123456,
            "brandName": "Test Brand",
            "subjectID": 1001,
            "metrics": {
                "ordersCount": 4  # 4 –∑–∞–∫–∞–∑–∞ (–∏—Å–∫–ª—é—á–∞—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            }
        },
        {
            "nmID": 789012,
            "brandName": "Another Brand", 
            "subjectID": 1002,
            "metrics": {
                "ordersCount": 2  # 2 –∑–∞–∫–∞–∑–∞ (–∏—Å–∫–ª—é—á–∞—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            }
        }
    ]
    
    products = WildberriesCalculator.process_combined_api_data(analytics_v2_data, raw_warehouse_data)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    all_product_warehouses = set()
    for product in products:
        for warehouse in product.warehouses:
            all_product_warehouses.add(warehouse.name)
    
    print(f"üì¶ Warehouses in products: {all_product_warehouses}")
    
    delivery_statuses_in_products = all_product_warehouses & expected_delivery_statuses
    if delivery_statuses_in_products:
        print(f"‚ùå Found delivery statuses in products: {delivery_statuses_in_products}")
        return False
    else:
        print("‚úÖ No delivery statuses in final products")
    
    print("\nüîç Step 5: Testing WarehouseDataProcessor...")
    processor = WarehouseDataProcessor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    processed_warehouses = processor.process_warehouse_remains(
        [item for item in raw_warehouse_data if item["supplierArticle"] == "TEST-PRODUCT-001"],
        "TEST-PRODUCT-001"
    )
    
    processed_warehouse_names = {wh.name for wh in processed_warehouses}
    print(f"üì¶ Warehouses from processor: {processed_warehouse_names}")
    
    delivery_statuses_in_processor = processed_warehouse_names & expected_delivery_statuses
    if delivery_statuses_in_processor:
        print(f"‚ùå Found delivery statuses in processor output: {delivery_statuses_in_processor}")
        return False
    else:
        print("‚úÖ No delivery statuses in processor output")
    
    print("\nüéâ All filtering tests passed!")
    print("=" * 60)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä FILTERING SUMMARY:")
    print(f"   Real warehouses preserved: {len(all_product_warehouses)}")
    print(f"   Delivery statuses filtered: {len(expected_delivery_statuses)}")
    print(f"   Products created: {len(products)}")
    print(f"   Total stock in products: {sum(p.total_stock for p in products)}")
    print(f"   Total orders in products: {sum(p.total_orders for p in products)}")
    
    return True


def test_edge_cases():
    """–¢–µ—Å—Ç –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\nüß™ Edge Cases Test")
    print("=" * 30)
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    empty_result = WildberriesCalculator.group_data_by_product([], [])
    if empty_result != {}:
        print("‚ùå Empty data test failed")
        return False
    print("‚úÖ Empty data handling")
    
    # –¢–µ—Å—Ç —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    bad_data = [
        {
            "nmId": 12345,
            "vendorCode": "TEST",
            "warehouses": [
                {"warehouseName": None, "quantity": 100},
                {"warehouseName": "", "quantity": 50},
                {"warehouseName": "–¢—É–ª–∞", "quantity": 200}
            ]
        }
    ]
    
    result = WildberriesCalculator.group_data_by_product(bad_data, [])
    if ("TEST", 12345) in result:
        warehouses = result[("TEST", 12345)]["warehouses"]
        if None in warehouses or "" in warehouses:
            print("‚ùå None/empty handling failed")
            return False
        if "–¢—É–ª–∞" not in warehouses:
            print("‚ùå Valid warehouse not preserved")
            return False
    
    print("‚úÖ None/empty values handling")
    
    return True


if __name__ == "__main__":
    print("üöÄ WAREHOUSE FILTERING INTEGRATION TESTS")
    print("=" * 70)
    
    success = True
    
    try:
        success &= test_complete_warehouse_filtering_pipeline()
        success &= test_edge_cases()
    except Exception as e:
        print(f"‚ùå Test failed with exception: {e}")
        import traceback
        traceback.print_exc()
        success = False
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ ALL INTEGRATION TESTS PASSED!")
        print("‚úÖ Warehouse filtering is working correctly across all modules")
    else:
        print("‚ùå SOME TESTS FAILED!")
        print("‚ö†Ô∏è Check the warehouse filtering implementation")
    
    print("=" * 70)