#!/usr/bin/env python3
"""
Test warehouse stock calculation with proper exclusion of "in transit" warehouses.
"""

import sys
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from stock_tracker.services.product_service import ProductService
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)

def create_test_data_with_in_transit():
    """Create test data with various warehouse types including in-transit."""
    
    # Mock orders data
    orders_data = [
        {"nmId": 12345, "supplierArticle": "TestProduct1", "warehouseName": "–ö–∞–∑–∞–Ω—å", "quantity": 2},
        {"nmId": 12345, "supplierArticle": "TestProduct1", "warehouseName": "–ü–æ–¥–æ–ª—å—Å–∫", "quantity": 1},
    ]
    
    # Mock warehouse data with mixed warehouse types
    warehouse_data = [
        {
            "nmId": 12345,
            "vendorCode": "TestProduct1",
            "warehouses": [
                # Real WB warehouses
                {"warehouseName": "–ö–∞–∑–∞–Ω—å", "quantity": 10},
                {"warehouseName": "–ü–æ–¥–æ–ª—å—Å–∫", "quantity": 15},
                {"warehouseName": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", "quantity": 8},
                
                # In-transit warehouses (should be excluded from real stock)
                {"warehouseName": "–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB", "quantity": 25},
                {"warehouseName": "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "quantity": 12},
                {"warehouseName": "–í –¥–æ—Ä–æ–≥–µ —Ç—Ä–∞–Ω–∑–∏—Ç", "quantity": 5},
                
                # MP warehouses (should be included in real stock)
                {"warehouseName": "–°–∫–ª–∞–¥ –ú–ü –ú–æ—Å–∫–≤–∞", "quantity": 7},
            ]
        }
    ]
    
    return orders_data, warehouse_data

def test_warehouse_categorization():
    """Test the _is_in_transit_warehouse method."""
    
    print("üß™ Testing warehouse categorization...")
    
    # Mock database operations
    class MockDatabaseOperations:
        async def create_or_update_product(self, product):
            return True
        async def update_product(self, product_id, updated_product):
            return True
    
    product_service = ProductService(MockDatabaseOperations())
    
    # Test cases for warehouse categorization
    test_cases = [
        # In-transit warehouses (should return True)
        ("–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB", True),
        ("–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", True),
        ("–í –¥–æ—Ä–æ–≥–µ —Ç—Ä–∞–Ω–∑–∏—Ç", True),
        ("–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤", True),
        ("–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", True),
        ("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", True),
        
        # Real warehouses (should return False)
        ("–ö–∞–∑–∞–Ω—å", False),
        ("–ü–æ–¥–æ–ª—å—Å–∫", False),
        ("–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", False),
        ("–°–∫–ª–∞–¥ –ú–ü –ú–æ—Å–∫–≤–∞", False),
        ("–û–±—É—Ö–æ–≤–æ –ú–ü", False),
        ("–ö–æ–ª–µ–¥–∏–Ω–æ", False),
        ("", False),  # Empty string
    ]
    
    print("   üîç Testing warehouse categorization:")
    all_correct = True
    
    for warehouse_name, expected_in_transit in test_cases:
        result = product_service._is_in_transit_warehouse(warehouse_name)
        status = "‚úÖ" if result == expected_in_transit else "‚ùå"
        warehouse_type = "In-Transit" if result else "Real Warehouse"
        expected_type = "In-Transit" if expected_in_transit else "Real Warehouse"
        
        print(f"      {status} '{warehouse_name}' ‚Üí {warehouse_type} (expected: {expected_type})")
        
        if result != expected_in_transit:
            all_correct = False
    
    print(f"   üìä Categorization test: {'‚úÖ PASSED' if all_correct else '‚ùå FAILED'}")
    return all_correct

def test_stock_calculation():
    """Test stock calculation with in-transit exclusion."""
    
    print("\nüìä Testing stock calculation with in-transit exclusion...")
    
    # Create test data
    orders_data, warehouse_data = create_test_data_with_in_transit()
    
    # Mock database operations
    class MockDatabaseOperations:
        async def create_or_update_product(self, product):
            return True
        async def update_product(self, product_id, updated_product):
            return True
    
    product_service = ProductService(MockDatabaseOperations())
    
    # Test conversion
    warehouse_record = warehouse_data[0]
    converted_product = product_service._convert_api_record_to_product(
        warehouse_record, orders_data
    )
    
    # Calculate expected values
    all_warehouses = warehouse_record['warehouses']
    total_all_stock = sum(wh['quantity'] for wh in all_warehouses)
    
    real_warehouses = []
    in_transit_warehouses = []
    
    for wh in all_warehouses:
        if product_service._is_in_transit_warehouse(wh['warehouseName']):
            in_transit_warehouses.append(wh)
        else:
            real_warehouses.append(wh)
    
    expected_real_stock = sum(wh['quantity'] for wh in real_warehouses)
    expected_in_transit_stock = sum(wh['quantity'] for wh in in_transit_warehouses)
    
    print(f"   üì¶ Warehouse breakdown:")
    print(f"      Total warehouses: {len(all_warehouses)}")
    print(f"      Real warehouses: {len(real_warehouses)} (stock: {expected_real_stock})")
    for wh in real_warehouses:
        print(f"         - {wh['warehouseName']}: {wh['quantity']}")
    
    print(f"      In-transit warehouses: {len(in_transit_warehouses)} (stock: {expected_in_transit_stock})")
    for wh in in_transit_warehouses:
        print(f"         - {wh['warehouseName']}: {wh['quantity']}")
    
    print(f"\n   üéØ Stock calculation results:")
    print(f"      Expected real stock: {expected_real_stock}")
    print(f"      Actual product.total_stock: {converted_product.total_stock}")
    print(f"      Expected total all stock: {total_all_stock}")
    print(f"      Orders: {converted_product.total_orders}")
    
    # Debug: Check all Product attributes
    print(f"\n   üîç Debug Product attributes:")
    for attr_name in dir(converted_product):
        if not attr_name.startswith('_'):
            attr_value = getattr(converted_product, attr_name, 'N/A')
            if not callable(attr_value):
                print(f"      {attr_name}: {attr_value}")
    
    # Verify calculation
    stock_calculation_correct = (converted_product.total_stock == expected_real_stock)
    
    print(f"   üìä Stock calculation: {'‚úÖ CORRECT' if stock_calculation_correct else '‚ùå INCORRECT'}")
    
    if stock_calculation_correct:
        savings = expected_in_transit_stock
        print(f"   üí° Improvement: Excluded {savings} in-transit items from stock count")
        print(f"   üìà More accurate turnover calculation based on real warehouse stock")
    
    return stock_calculation_correct

def test_improved_warehouse_logic():
    """Run all tests for improved warehouse logic."""
    
    print("üîß Testing Improved Warehouse Stock Logic")
    print("=" * 60)
    
    # Test 1: Warehouse categorization
    categorization_passed = test_warehouse_categorization()
    
    # Test 2: Stock calculation
    calculation_passed = test_stock_calculation()
    
    print(f"\n{'=' * 60}")
    print(f"üìä TEST SUMMARY:")
    print(f"   Warehouse Categorization: {'‚úÖ PASSED' if categorization_passed else '‚ùå FAILED'}")
    print(f"   Stock Calculation: {'‚úÖ PASSED' if calculation_passed else '‚ùå FAILED'}")
    
    overall_passed = categorization_passed and calculation_passed
    print(f"   Overall Result: {'‚úÖ ALL TESTS PASSED' if overall_passed else '‚ùå SOME TESTS FAILED'}")
    
    if overall_passed:
        print(f"\nüéâ Improvement Summary:")
        print(f"   ‚úÖ In-transit warehouses correctly excluded from stock count")
        print(f"   ‚úÖ Real warehouse stock calculation accurate")
        print(f"   ‚úÖ More precise turnover calculations")
        print(f"   ‚úÖ Better inventory management metrics")
    
    return overall_passed

if __name__ == "__main__":
    test_improved_warehouse_logic()