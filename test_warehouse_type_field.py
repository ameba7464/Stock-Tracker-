"""
Test script to verify warehouseType field in supplier/orders API.

According to urls.md documentation:
warehouseType: string, Enum: "–°–∫–ª–∞–¥ WB" "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞"

This test will:
1. Fetch recent orders from WB supplier/orders API
2. Check if warehouseType field exists
3. Analyze the values (FBO="–°–∫–ª–∞–¥ WB", FBS="–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞")
4. Count orders by warehouse type
"""

import asyncio
import sys
from datetime import datetime, timedelta
from collections import Counter

# Add parent directory to path
sys.path.insert(0, r"c:\Users\miros\Downloads\Stock Tracker\Stock-Tracker")

from src.stock_tracker.api.client import create_wildberries_client
from src.stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


async def test_warehouse_type_field():
    """Test if warehouseType field exists in supplier/orders API response."""
    
    print("\n" + "="*80)
    print("TEST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è warehouseType –≤ API supplier/orders")
    print("="*80 + "\n")
    
    # Create WB API client
    client = create_wildberries_client()
    
    # Get orders from last 30 days
    date_from = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
    
    print(f"üìÖ –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —Å {date_from}")
    print(f"üîó Endpoint: https://statistics-api.wildberries.ru/api/v1/supplier/orders")
    print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n")
    
    try:
        # Fetch orders
        orders = await client.get_supplier_orders(date_from=date_from, flag=0)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
        
        if not orders:
            print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return
        
        # Analyze first order to check structure
        print("\n" + "-"*80)
        print("–°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ì–û –ó–ê–ö–ê–ó–ê:")
        print("-"*80)
        
        first_order = orders[0]
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
        for key in sorted(first_order.keys()):
            value = first_order[key]
            # Truncate long values
            if isinstance(value, str) and len(value) > 50:
                value = value[:50] + "..."
            print(f"  ‚Ä¢ {key}: {value}")
        
        # Check if warehouseType field exists
        print("\n" + "-"*80)
        print("–ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø warehouseType:")
        print("-"*80 + "\n")
        
        if "warehouseType" in first_order:
            print("‚úÖ –ü–æ–ª–µ warehouseType –ù–ê–ô–î–ï–ù–û!")
            
            # Analyze all orders by warehouse type
            warehouse_types = Counter()
            warehouse_names_by_type = {}
            
            for order in orders:
                wh_type = order.get("warehouseType", "Unknown")
                wh_name = order.get("warehouseName", "Unknown")
                
                warehouse_types[wh_type] += 1
                
                if wh_type not in warehouse_names_by_type:
                    warehouse_names_by_type[wh_type] = set()
                warehouse_names_by_type[wh_type].add(wh_name)
            
            print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–∫–ª–∞–¥–æ–≤:")
            for wh_type, count in warehouse_types.most_common():
                percentage = (count / len(orders)) * 100
                print(f"\n  üì¶ {wh_type}: {count} –∑–∞–∫–∞–∑–æ–≤ ({percentage:.1f}%)")
                
                # Show warehouse names for this type
                names = warehouse_names_by_type.get(wh_type, set())
                if names:
                    print(f"     –°–∫–ª–∞–¥—ã: {', '.join(sorted(names)[:5])}")
                    if len(names) > 5:
                        print(f"     ... –∏ –µ—â–µ {len(names) - 5} —Å–∫–ª–∞–¥–æ–≤")
            
            # Find example of each warehouse type
            print("\n" + "-"*80)
            print("–ü–†–ò–ú–ï–†–´ –ó–ê–ö–ê–ó–û–í –ü–û –¢–ò–ü–ê–ú –°–ö–õ–ê–î–û–í:")
            print("-"*80)
            
            examples_by_type = {}
            for order in orders:
                wh_type = order.get("warehouseType")
                if wh_type and wh_type not in examples_by_type:
                    examples_by_type[wh_type] = order
                
                if len(examples_by_type) >= 2:  # We expect 2 types
                    break
            
            for wh_type, example in examples_by_type.items():
                print(f"\nüìã {wh_type}:")
                print(f"   –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {example.get('supplierArticle')}")
                print(f"   –ê—Ä—Ç–∏–∫—É–ª WB: {example.get('nmId')}")
                print(f"   –°–∫–ª–∞–¥: {example.get('warehouseName')}")
                print(f"   –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {example.get('date')}")
                print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã: {example.get('isCancel')}")
            
            # CRITICAL FINDING
            print("\n" + "="*80)
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î:")
            print("="*80)
            print("""
‚úÖ –ü–æ–ª–µ warehouseType –°–£–©–ï–°–¢–í–£–ï–¢ –≤ API supplier/orders!

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ:
1. –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Å–∫–ª–∞–¥–∞ –¥–ª—è –ö–ê–ñ–î–û–ì–û –ó–ê–ö–ê–ó–ê
2. "–°–∫–ª–∞–¥ WB" = FBO (—Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries)
3. "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞" = FBS/MP (—Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞)

–û–î–ù–ê–ö–û:
‚ö†Ô∏è  –≠—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ API –ó–ê–ö–ê–ó–û–í (supplier/orders)
‚ö†Ô∏è  –í API –û–°–¢–ê–¢–ö–û–í (warehouse_remains) —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è –ù–ï–¢!

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ API warehouse_remains –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û –æ—Å—Ç–∞—Ç–∫–∏ FBO,
–∞ –æ—Å—Ç–∞—Ç–∫–∏ FBS/MP –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã.
            """)
            
        else:
            print("‚ùå –ü–æ–ª–µ warehouseType –ù–ï –ù–ê–ô–î–ï–ù–û!")
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ:")
            print(", ".join(sorted(first_order.keys())))
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        client.close()


if __name__ == "__main__":
    asyncio.run(test_warehouse_type_field())
