#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ group_data_by_product().
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

print("="*80)
print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ö–ê–ó–û–í")
print("="*80)

print("\nüìã –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
print("   1. –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ gNumber/odid")
print("   2. –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–æ–ª–µ group['total_orders']")
print("   3. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º")
print("   4. –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")

print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è src/stock_tracker/core/calculator.py...")

patch_content = '''
# PATCH for src/stock_tracker/core/calculator.py
# –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ group_data_by_product():

    # Track unique orders to prevent duplication
    processed_order_ids = set()
    duplicate_orders_count = 0
    
    logger.info("Starting order processing with deduplication...")

# –í —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 580), –ó–ê–ú–ï–ù–ò–¢–¨:
# for order in orders_data:
# –ù–ê:

    for order in orders_data:
        # Get unique order identifier
        order_id = order.get("gNumber") or order.get("odid") or order.get("srid")
        
        # Skip if we've already processed this order
        if order_id and order_id in processed_order_ids:
            duplicate_orders_count += 1
            logger.debug(f"Skipping duplicate order: {order_id}")
            continue
        
        # Mark order as processed
        if order_id:
            processed_order_ids.add(order_id)
        
        nm_id = order.get("nmId")
        supplier_article = order.get("supplierArticle", "")
        # ... rest of the logic

# –£–î–ê–õ–ò–¢–¨ —Å—Ç—Ä–æ–∫—É (–æ–∫–æ–ª–æ 644):
# group["total_orders"] += 1  # ‚ùå –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!

# –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞, –ü–ï–†–ï–î return:

    # Validate orders calculation
    logger.info(f"\\nüìä ORDERS VALIDATION:")
    logger.info(f"   Total orders processed: {orders_processed}")
    logger.info(f"   Duplicate orders skipped: {duplicate_orders_count}")
    logger.info(f"   Unique order IDs tracked: {len(processed_order_ids)}")
    
    # Validate that sum of warehouse orders matches expectations
    validation_errors = 0
    for (article, nm_id), group in grouped_data.items():
        warehouse_orders_sum = sum(wh["orders"] for wh in group["warehouses"].values())
        
        # Count raw orders for this product (for validation)
        raw_orders = sum(1 for order in orders_data 
                        if order.get("supplierArticle") == article 
                        and order.get("nmId") == nm_id
                        and not order.get("isCancel", False))
        
        if warehouse_orders_sum != raw_orders:
            validation_errors += 1
            logger.warning(f"‚ö†Ô∏è  Orders mismatch for {article}:")
            logger.warning(f"   Raw orders: {raw_orders}")
            logger.warning(f"   Warehouse sum: {warehouse_orders_sum}")
            logger.warning(f"   Difference: {warehouse_orders_sum - raw_orders}")
    
    if validation_errors == 0:
        logger.info("‚úÖ All products passed orders validation")
    else:
        logger.warning(f"‚ö†Ô∏è  {validation_errors} products failed validation")
    
    return dict(grouped_data)
'''

print("\nüìù –ü–∞—Ç—á –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
print("\n" + "="*80)
print("–ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í src/stock_tracker/core/calculator.py")
print("="*80)

print(patch_content)

print("\n" + "="*80)
print("üéØ –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
print("="*80)

print("\n1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:")
print("""
    processed_order_ids = set()
    
    for order in orders_data:
        order_id = order.get("gNumber") or order.get("odid")
        
        if order_id in processed_order_ids:
            continue  # Skip duplicate
        
        processed_order_ids.add(order_id)
        # ... process order
""")

print("\n2Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–æ–ª–µ:")
print("""
    # –£–î–ê–õ–ò–¢–¨ —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
    # group["total_orders"] += 1  # ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!
""")

print("\n3Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
print("""
    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:
    for (article, nm_id), group in grouped_data.items():
        warehouse_sum = sum(wh["orders"] for wh in group["warehouses"].values())
        raw_orders_count = len([o for o in orders_data 
                               if o.get("nmId") == nm_id 
                               and not o.get("isCancel")])
        
        if warehouse_sum != raw_orders_count:
            logger.warning(f"Mismatch for {article}: {warehouse_sum} != {raw_orders_count}")
""")

print("\n" + "="*80)
print("üì• –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–¢–ß–ê")
print("="*80)

print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
print("   1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
print("   2. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π diff")
print("   3. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å")
print("\n–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
print("   python apply_order_fix_patch.py")

print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω - –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é!")
