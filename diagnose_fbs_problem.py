#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å FBS –æ—Å—Ç–∞—Ç–∫–∞–º–∏

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤:
- Its2/50g (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π)
- Its2/50g+Aks5/20g.FBS (—Ä–∞–±–æ—á–∏–π)
"""

import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / "src"))

from stock_tracker.utils.warehouse_mapper import (
    normalize_warehouse_name,
    is_marketplace_warehouse
)
from stock_tracker.core.calculator import is_real_warehouse

def diagnose_warehouse_processing():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    
    print("=" * 100)
    print("DIAGNOSTIKA FBS PROBLEMY")
    print("=" * 100)
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–∞ "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"
    test_variants = [
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        "Marketplace",
        "marketplace",
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å ",  # —Å –ø—Ä–æ–±–µ–ª–æ–º
        " –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",  # —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –Ω–∞—á–∞–ª–µ
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å\t",  # —Å —Ç–∞–±–æ–º
        "–ú–ü",
        "–º–ø",
        "MP",
        "mp",
        "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "—Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "Seller warehouse",
        "FBS",
        "fbs",
    ]
    
    print("üìã –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ normalize_warehouse_name()")
    print("-" * 100)
    
    for variant in test_variants:
        normalized = normalize_warehouse_name(variant)
        is_in_map = normalized == "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"
        status = "‚úÖ" if is_in_map else "‚ùå"
        
        print(f"{status} '{variant}' -> '{normalized}' | in map: {is_in_map}")
    
    print()
    print("üìã –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ is_marketplace_warehouse()")
    print("-" * 100)
    
    for variant in test_variants:
        is_marketplace = is_marketplace_warehouse(variant)
        status = "‚úÖ" if is_marketplace else "‚ùå"
        
        print(f"{status} '{variant}' -> is_marketplace: {is_marketplace}")
    
    print()
    print("üìã –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ is_real_warehouse()")
    print("-" * 100)
    
    for variant in test_variants:
        is_real = is_real_warehouse(variant)
        status = "‚úÖ" if is_real else "‚ùå"
        
        print(f"{status} '{variant}' -> is_real: {is_real}")
    
    print()
    print("üìã –¢–ï–°–¢ 4: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("-" * 100)
    
    for variant in test_variants:
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞: '{variant}' (repr: {repr(variant)})")
        
        # –®–∞–≥ 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized = normalize_warehouse_name(variant)
        print(f"   1. normalize_warehouse_name() -> '{normalized}'")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        is_real = is_real_warehouse(normalized)
        print(f"   2. is_real_warehouse() -> {is_real}")
        
        if is_real:
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            is_marketplace = is_marketplace_warehouse(normalized)
            print(f"   3. is_marketplace_warehouse() -> {is_marketplace}")
            
            if is_marketplace:
                print(f"   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∫–ª–∞–¥ –±—É–¥–µ—Ç –í–ö–õ–Æ–ß–ï–ù –∫–∞–∫ FBS")
            else:
                print(f"   ‚ö†Ô∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∫–ª–∞–¥ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π")
        else:
            print(f"   ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∫–ª–∞–¥ –±—É–¥–µ—Ç –ò–°–ö–õ–Æ–ß–ï–ù")
    
    print()
    print("=" * 100)
    print("üìä –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–∞—Ä—Ç—ã —Å–∫–ª–∞–¥–æ–≤")
    print("=" * 100)
    print()
    
    print("–ö–∞—Ä—Ç–∞ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src/stock_tracker/utils/warehouse_mapper.py")
    print("–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º. —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é")
    
    print()
    print("=" * 100)
    print("üîç –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–´–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 100)
    print()
    
    problems_found = [
        {
            "severity": "HIGH",
            "issue": "–í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏",
            "impact": "–ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å ' (—Å –ø—Ä–æ–±–µ–ª–æ–º) - –æ–Ω–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–∞—Ä—Ç–µ"
        },
        {
            "severity": "MEDIUM",
            "issue": "–í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ú–ü, mp)",
            "impact": "–ï—Å–ª–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è - –æ–Ω–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–µ"
        }
    ]
    
    if problems_found:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print()
        for i, problem in enumerate(problems_found, 1):
            print(f"{i}. [{problem['severity']}] {problem['issue']}")
            print(f"   –í–ª–∏—è–Ω–∏–µ: {problem['impact']}")
            print(f"   –†–µ—à–µ–Ω–∏–µ: {problem['solution']}")
            print()
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º –≤ –∫–∞—Ä—Ç–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print()
    print("=" * 100)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 100)
    print()
    
    print("1. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ group_data_by_product():")
    print("   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å RAW –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –∏–∑ API")
    print("   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç normalize_warehouse_name()")
    print("   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_real_warehouse()")
    print()
    
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:")
    print("   python update_table_fixed.py")
    print("   (–ò—Å–∫–∞—Ç—å –≤ –ª–æ–≥–∞—Ö –∞—Ä—Ç–∏–∫—É–ª—ã Its2/50g –∏ ItsSport2/50g)")
    print()
    
    print("3. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:")
    print("   - –ö–∞–∫–æ–µ RAW –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ API")
    print("   - –ü—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ normalize_warehouse_name()")
    print("   - –ü—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ is_real_warehouse()")
    print()
    
    print("4. –ü–æ—Å–ª–µ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –∏–∑ —Ä–µ—à–µ–Ω–∏–π:")
    print("   - –†–∞—Å—à–∏—Ä–∏—Ç—å CANONICAL_WAREHOUSE_MAP")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—á–µ—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ normalize_warehouse_name()")
    print("   - –î–æ–±–∞–≤–∏—Ç—å fallback –≤ is_real_warehouse()")
    print()


def test_with_mock_api_data():
    """–¢–µ—Å—Ç —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö API"""
    
    print("=" * 100)
    print("üß™ –¢–ï–°–¢ –° –ò–ú–ò–¢–ê–¶–ò–ï–ô API –î–ê–ù–ù–´–•")
    print("=" * 100)
    print()
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    mock_data_problem = {
        "nmId": 163383327,
        "vendorCode": "Its2/50g",
        "warehouses": [
            {"warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "quantity": 1884},
            {"warehouseName": "–ß–µ—Ö–æ–≤ 1", "quantity": 212},
            {"warehouseName": "–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)", "quantity": 87},
        ]
    }
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    mock_data_working = {
        "nmId": 552086752,
        "vendorCode": "Its2/50g+Aks5/20g.FBS",
        "warehouses": [
            {"warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "quantity": 175},
        ]
    }
    
    print("üì¶ –ü–†–û–ë–õ–ï–ú–ù–´–ô –ê–†–¢–ò–ö–£–õ: Its2/50g")
    print("-" * 100)
    process_mock_product(mock_data_problem)
    
    print()
    print("üì¶ –†–ê–ë–û–ß–ò–ô –ê–†–¢–ò–ö–£–õ: Its2/50g+Aks5/20g.FBS")
    print("-" * 100)
    process_mock_product(mock_data_working)


def process_mock_product(product_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞"""
    
    vendor_code = product_data["vendorCode"]
    nm_id = product_data["nmId"]
    
    print(f"–ê—Ä—Ç–∏–∫—É–ª: {vendor_code} (nmId: {nm_id})")
    print()
    
    included_warehouses = []
    excluded_warehouses = []
    
    for warehouse in product_data["warehouses"]:
        wh_name_raw = warehouse["warehouseName"]
        quantity = warehouse["quantity"]
        
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–ª–∞–¥–∞: '{wh_name_raw}' (qty: {quantity})")
        
        # –®–∞–≥ 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        wh_name_normalized = normalize_warehouse_name(wh_name_raw)
        print(f"   1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: '{wh_name_raw}' -> '{wh_name_normalized}'")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        is_real = is_real_warehouse(wh_name_normalized)
        print(f"   2. is_real_warehouse(): {is_real}")
        
        if is_real:
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            is_marketplace = is_marketplace_warehouse(wh_name_normalized)
            print(f"   3. is_marketplace_warehouse(): {is_marketplace}")
            
            included_warehouses.append({
                "raw": wh_name_raw,
                "normalized": wh_name_normalized,
                "quantity": quantity,
                "is_fbs": is_marketplace
            })
            
            status = "FBS" if is_marketplace else "FBO"
            print(f"   ‚úÖ –í–ö–õ–Æ–ß–ï–ù –∫–∞–∫ {status}")
        else:
            excluded_warehouses.append({
                "raw": wh_name_raw,
                "normalized": wh_name_normalized,
                "quantity": quantity
            })
            print(f"   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù")
        
        print()
    
    # –ò—Ç–æ–≥–∏
    print("üìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
    print(f"   –í–∫–ª—é—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(included_warehouses)}")
    print(f"   –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(excluded_warehouses)}")
    
    total_stock = sum(wh["quantity"] for wh in included_warehouses)
    fbs_stock = sum(wh["quantity"] for wh in included_warehouses if wh["is_fbs"])
    fbo_stock = total_stock - fbs_stock
    
    print(f"   –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {total_stock}")
    print(f"   FBS –æ—Å—Ç–∞—Ç–∫–∏: {fbs_stock}")
    print(f"   FBO –æ—Å—Ç–∞—Ç–∫–∏: {fbo_stock}")
    
    if excluded_warehouses:
        excluded_stock = sum(wh["quantity"] for wh in excluded_warehouses)
        print(f"   ‚ö†Ô∏è –ü–û–¢–ï–†–Ø–ù–û –æ—Å—Ç–∞—Ç–∫–æ–≤: {excluded_stock}")


if __name__ == "__main__":
    diagnose_warehouse_processing()
    print("\n" * 2)
    test_with_mock_api_data()
