#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã—è–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import sys
from pathlib import Path
from collections import defaultdict, Counter
from datetime import datetime

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from stock_tracker.api.products import WildberriesProductDataFetcher
from stock_tracker.api.client import create_wildberries_client
from stock_tracker.core.calculator import WildberriesCalculator
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


async def diagnose_order_duplication():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
    
    print("="*80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ö–ê–ó–û–í")
    print("="*80)
    
    try:
        # 1. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Wildberries API...")
        client = create_wildberries_client()
        fetcher = WildberriesProductDataFetcher(client)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–∫–∞–∫ –≤ CSV)
        from datetime import timedelta
        date_from = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: —Å {date_from} –ø–æ —Å–µ–≥–æ–¥–Ω—è")
        orders_data = await fetcher.fetch_supplier_orders(date_from, flag=0)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(orders_data)} –∑–∞–ø–∏—Å–µ–π –∑–∞–∫–∞–∑–æ–≤")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤
        print("\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤...")
        
        order_ids = []
        order_g_numbers = []
        order_srid = []
        
        for order in orders_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ ID –ø–æ–ª–µ–π
            if "gNumber" in order:
                order_g_numbers.append(order["gNumber"])
            if "srid" in order:
                order_srid.append(order["srid"])
            if "odid" in order:
                order_ids.append(order["odid"])
        
        print(f"\n   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ID:")
        print(f"      - gNumber –Ω–∞–π–¥–µ–Ω–æ: {len(order_g_numbers)}")
        print(f"      - srid –Ω–∞–π–¥–µ–Ω–æ: {len(order_srid)}")
        print(f"      - odid –Ω–∞–π–¥–µ–Ω–æ: {len(order_ids)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if order_g_numbers:
            unique_g = len(set(order_g_numbers))
            total_g = len(order_g_numbers)
            duplicates_g = total_g - unique_g
            
            print(f"\n   üîç –ê–Ω–∞–ª–∏–∑ gNumber:")
            print(f"      - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_g}")
            print(f"      - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_g}")
            print(f"      - –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_g}")
            
            if duplicates_g > 0:
                print(f"      ‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´!")
                
                # –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
                counter = Counter(order_g_numbers)
                duplicates = {k: v for k, v in counter.items() if v > 1}
                
                print(f"\n      –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
                for gnum, count in list(duplicates.items())[:5]:
                    print(f"         - {gnum}: –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑")
            else:
                print(f"      ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        print("\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º...")
        
        orders_by_article = defaultdict(list)
        orders_by_nmid = defaultdict(list)
        
        for order in orders_data:
            article = order.get("supplierArticle", "")
            nm_id = order.get("nmId", 0)
            
            if article:
                orders_by_article[article].append(order)
            if nm_id:
                orders_by_nmid[nm_id].append(order)
        
        print(f"   üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞: {len(orders_by_article)}")
        print(f"   üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö nmId: {len(orders_by_nmid)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-3 –∞—Ä—Ç–∏–∫—É–ª–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
        test_articles = {
            "Its1_2_3/50g": 163383326,
            "Its2/50g": 163383327,
            "Its2/50g+Aks5/20g": 262310317
        }
        
        print(f"\n   üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤:")
        
        for article, nm_id in test_articles.items():
            article_orders = orders_by_article.get(article, [])
            nmid_orders = orders_by_nmid.get(nm_id, [])
            
            print(f"\n   üì¶ {article} (nmId: {nm_id}):")
            print(f"      –ü–æ –∞—Ä—Ç–∏–∫—É–ª—É: {len(article_orders)} –∑–∞–∫–∞–∑–æ–≤")
            print(f"      –ü–æ nmId: {len(nmid_orders)} –∑–∞–∫–∞–∑–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
            if article_orders and "gNumber" in article_orders[0]:
                article_gnumbers = [o.get("gNumber") for o in article_orders if "gNumber" in o]
                unique_gnumbers = len(set(article_gnumbers))
                
                print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö gNumber: {unique_gnumbers}")
                
                if unique_gnumbers != len(article_gnumbers):
                    print(f"      ‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´ –¥–ª—è {article}: {len(article_gnumbers) - unique_gnumbers} —à—Ç")
                else:
                    print(f"      ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouses = defaultdict(int)
            for order in article_orders:
                wh = order.get("warehouseName", "Unknown")
                warehouses[wh] += 1
            
            print(f"      –ó–∞–∫–∞–∑—ã –ø–æ —Å–∫–ª–∞–¥–∞–º:")
            for wh, count in sorted(warehouses.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"         - {wh}: {count}")
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ group_data_by_product
        print(f"\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤
        print(f"   üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...")
        warehouse_task_id = await fetcher.create_warehouse_remains_task()
        await asyncio.sleep(30)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        warehouse_data = await fetcher.download_warehouse_remains(warehouse_task_id)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(warehouse_data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"\n   üîÑ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        grouped_data = WildberriesCalculator.group_data_by_product(
            warehouse_data, 
            orders_data
        )
        
        print(f"   ‚úÖ –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(grouped_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        print(f"\n   üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:")
        
        for article, nm_id in test_articles.items():
            key = (article, nm_id)
            if key in grouped_data:
                group = grouped_data[key]
                
                # –°—á–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Å–∫–ª–∞–¥–æ–≤
                warehouse_orders_sum = sum(wh["orders"] for wh in group["warehouses"].values())
                
                # –°—á–∏—Ç–∞–µ–º –∏–∑ raw –¥–∞–Ω–Ω—ã—Ö
                raw_orders = len([o for o in orders_data 
                                if o.get("supplierArticle") == article 
                                and o.get("nmId") == nm_id
                                and not o.get("isCancel", False)])
                
                print(f"\n   üì¶ {article}:")
                print(f"      Raw –∑–∞–∫–∞–∑–æ–≤ –∏–∑ API: {raw_orders}")
                print(f"      –°—É–º–º–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º: {warehouse_orders_sum}")
                print(f"      –†–∞–∑–Ω–∏—Ü–∞: {warehouse_orders_sum - raw_orders}")
                
                if warehouse_orders_sum != raw_orders:
                    print(f"      ‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!")
                    print(f"      –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print(f"         1. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ")
                    print(f"         2. –ó–∞–∫–∞–∑ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    print(f"         3. –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
                    print(f"      –°–∫–ª–∞–¥—ã:")
                    for wh_name, wh_data in group["warehouses"].items():
                        if wh_data["orders"] > 0:
                            print(f"         - {wh_name}: {wh_data['orders']} –∑–∞–∫–∞–∑–æ–≤")
                else:
                    print(f"      ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        
        # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n" + "="*80)
        print(f"5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
        print(f"="*80)
        
        print(f"\n‚úÖ –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã:")
        print(f"   - –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   - –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å group_data_by_product()")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–∫–∞–∑—ã –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        
        print(f"\n‚ö†Ô∏è  –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –ù–ê–ô–î–ï–ù–´:")
        print(f"   - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID (gNumber)")
        print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å set() –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        print(f"   - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ")
        
        print(f"\nüîß –ö–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print(f"""
    # –í –º–µ—Ç–æ–¥–µ group_data_by_product():
    processed_order_ids = set()
    
    for order in orders_data:
        order_id = order.get("gNumber")  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        
        if order_id in processed_order_ids:
            logger.warning(f"Skipping duplicate order: {{order_id}}")
            continue
        
        processed_order_ids.add(order_id)
        # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(diagnose_order_duplication())
    
    if success:
        print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        exit(0)
    else:
        print(f"\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        exit(1)
