#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –º–µ—Ç—Ä–∏–∫–æ–π "–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞".

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (warehouse_remains vs supplier/orders)
2. –õ–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
3. –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
4. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ urls.md —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.api.client import WildberriesAPIClient
from stock_tracker.core.calculator import WildberriesCalculator
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


async def diagnose_warehouse_orders():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º."""
    
    print("\n" + "="*80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ú–ï–¢–†–ò–ö–ê '–ó–ê–ö–ê–ó–´ –°–û –°–ö–õ–ê–î–ê'")
    print("="*80)
    
    try:
        client = WildberriesAPIClient()
        calculator = WildberriesCalculator()
        
        # ===== –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö =====
        print("\nüìã –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö API")
        print("-" * 80)
        
        # 1.1 Warehouse Remains
        print("\n1.1 –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_remains (–æ—Å—Ç–∞—Ç–∫–∏)...")
        try:
            task_id = await client.create_warehouse_remains_task()
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}")
            
            print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)
            
            warehouse_data = await client.download_warehouse_remains(task_id)
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(warehouse_data)}")
            
            if warehouse_data:
                sample = warehouse_data[0]
                print(f"\n   üì¶ –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ warehouse_remains:")
                print(f"      vendorCode: {sample.get('vendorCode')}")
                print(f"      nmId: {sample.get('nmId')}")
                print(f"      warehouses: {len(sample.get('warehouses', []))} —Å–∫–ª–∞–¥–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ordersCount
                has_orders_count = False
                for wh in sample.get('warehouses', []):
                    if 'ordersCount' in wh:
                        has_orders_count = True
                        break
                
                if has_orders_count:
                    print("      ‚úÖ ordersCount: –ù–ê–ô–î–ï–ù–û –≤ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    print("      ‚ùå ordersCount: –ù–ï –ù–ê–ô–î–ï–ù–û (—ç—Ç–æ –ü–†–û–ë–õ–ï–ú–ê!)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∫–ª–∞–¥—ã
                print(f"\n   üìã –ü–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞:")
                for i, wh in enumerate(sample.get('warehouses', [])[:3], 1):
                    wh_name = wh.get('warehouseName', 'Unknown')
                    quantity = wh.get('quantity', 0)
                    orders = wh.get('ordersCount', 'N/A')
                    print(f"      {i}. {wh_name}")
                    print(f"         - quantity: {quantity}")
                    print(f"         - ordersCount: {orders}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            warehouse_data = []
        
        # 1.2 Supplier Orders
        print("\n1.2 –ü–æ–ª—É—á–µ–Ω–∏–µ supplier/orders (–∑–∞–∫–∞–∑—ã)...")
        try:
            date_from = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%dT00:00:00")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –æ—Ç {date_from}")
            
            orders_data = await client.get_supplier_orders(date_from)
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders_data)}")
            
            if orders_data:
                sample_order = orders_data[0]
                print(f"\n   üì¶ –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ supplier/orders:")
                print(f"      supplierArticle: {sample_order.get('supplierArticle')}")
                print(f"      nmId: {sample_order.get('nmId')}")
                print(f"      warehouseName: {sample_order.get('warehouseName')}")
                print(f"      isCancel: {sample_order.get('isCancel')}")
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å–∫–ª–∞–¥–∞–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                if warehouse_data:
                    first_product_nm_id = warehouse_data[0].get('nmId')
                    product_orders = [o for o in orders_data if o.get('nmId') == first_product_nm_id]
                    
                    print(f"\n   üìä –ó–∞–∫–∞–∑—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ nmId={first_product_nm_id}:")
                    print(f"      –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(product_orders)}")
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥–∞–º
                    orders_by_warehouse = {}
                    for order in product_orders:
                        wh_name = order.get('warehouseName', 'Unknown')
                        if wh_name not in orders_by_warehouse:
                            orders_by_warehouse[wh_name] = 0
                        orders_by_warehouse[wh_name] += 1
                    
                    print(f"      –ü–æ —Å–∫–ª–∞–¥–∞–º:")
                    for wh_name, count in sorted(orders_by_warehouse.items(), key=lambda x: x[1], reverse=True):
                        print(f"         {wh_name}: {count} –∑–∞–∫–∞–∑–æ–≤")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            orders_data = []
        
        # ===== –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–∏ =====
        print("\n" + "="*80)
        print("üìã –¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("-" * 80)
        
        if warehouse_data:
            sample = warehouse_data[0]
            nm_id = sample.get('nmId')
            vendor_code = sample.get('vendorCode')
            
            print(f"\n2.1 –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞: {vendor_code} (nmId: {nm_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥
            print("\n   üîç –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –≤ product_service.py:")
            
            transit_warehouse = None
            real_warehouses = []
            
            for wh in sample.get('warehouses', []):
                wh_name = wh.get('warehouseName', '')
                quantity = wh.get('quantity', 0)
                
                if wh_name == "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π":
                    transit_warehouse = {'name': wh_name, 'quantity': quantity}
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥: '{wh_name}'")
                    print(f"         - –¢–µ–∫—É—â–∏–π –∫–æ–¥ –±–µ—Ä–µ—Ç quantity={quantity} –∫–∞–∫ –ó–ê–ö–ê–ó–´")
                    print(f"         - ‚ùå –≠–¢–û –û–®–ò–ë–ö–ê! –≠—Ç–æ —Ç—Ä–∞–Ω–∑–∏—Ç, –∞ –Ω–µ –∑–∞–∫–∞–∑—ã")
                elif wh_name not in ("–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ WB", "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"):
                    real_warehouses.append({'name': wh_name, 'quantity': quantity})
            
            print(f"\n   üì¶ –†–µ–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {len(real_warehouses)}")
            for wh in real_warehouses[:3]:
                print(f"      - {wh['name']}: stock={wh['quantity']}")
            
            if transit_warehouse:
                print(f"\n   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –¢–µ–∫—É—â–∏–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{transit_warehouse['name']}'")
                print(f"      quantity={transit_warehouse['quantity']} –∫–∞–∫ –∑–∞–∫–∞–∑—ã")
                print(f"      –ù–æ —ç—Ç–æ –¢–†–ê–ù–ó–ò–¢, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤!")
        
        # ===== –¢–ï–°–¢ 3: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ =====
        print("\n" + "="*80)
        print("üìã –¢–ï–°–¢ 3: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ urls.md")
        print("-" * 80)
        
        if warehouse_data and orders_data:
            sample = warehouse_data[0]
            nm_id = sample.get('nmId')
            vendor_code = sample.get('vendorCode')
            
            print(f"\n3.1 –ü—Ä–æ–¥—É–∫—Ç: {vendor_code} (nmId: {nm_id})")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤
            print("\n   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ (urls.md):")
            print("      –ò—Å—Ç–æ—á–Ω–∏–∫: /supplier/orders —ç–Ω–¥–ø–æ–∏–Ω—Ç")
            print("      –ú–µ—Ç–æ–¥: –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ nmId + warehouseName")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            total_orders_correct = len([o for o in orders_data 
                                       if o.get('nmId') == nm_id 
                                       and not o.get('isCancel', False)])
            
            print(f"\n      –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ): {total_orders_correct}")
            
            # –ü–æ —Å–∫–ª–∞–¥–∞–º
            print(f"\n      –ü–æ —Å–∫–ª–∞–¥–∞–º:")
            warehouse_orders = {}
            for order in orders_data:
                if order.get('nmId') == nm_id and not order.get('isCancel', False):
                    wh_name = order.get('warehouseName', 'Unknown')
                    warehouse_orders[wh_name] = warehouse_orders.get(wh_name, 0) + 1
            
            for wh_name, count in sorted(warehouse_orders.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"         {wh_name}: {count} –∑–∞–∫–∞–∑–æ–≤")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π
            print(f"\n   üìä –°–†–ê–í–ù–ï–ù–ò–ï:")
            if transit_warehouse:
                current_logic_orders = transit_warehouse['quantity']
                print(f"      –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û): {current_logic_orders} –∑–∞–∫–∞–∑–æ–≤")
                print(f"      –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (urls.md): {total_orders_correct} –∑–∞–∫–∞–∑–æ–≤")
                print(f"      –†–∞–∑–Ω–∏—Ü–∞: {abs(current_logic_orders - total_orders_correct)}")
                
                if current_logic_orders != total_orders_correct:
                    print(f"      ‚ùå –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢! –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø!")
        
        # ===== –¢–ï–°–¢ 4: –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ =====
        print("\n" + "="*80)
        print("üìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
        print("-" * 80)
        
        if orders_data:
            print("\n4.1 –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–æ–≤ –≥–¥–µ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ –∑–∞–∫–∞–∑–æ–≤
            warehouses_with_orders = set()
            for order in orders_data:
                if not order.get('isCancel', False):
                    wh_name = order.get('warehouseName', '')
                    if wh_name:
                        warehouses_with_orders.add(wh_name)
            
            print(f"   üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: {len(warehouses_with_orders)}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ warehouse_remains
            warehouses_with_stock = set()
            for item in warehouse_data:
                for wh in item.get('warehouses', []):
                    wh_name = wh.get('warehouseName', '')
                    quantity = wh.get('quantity', 0)
                    if wh_name and quantity > 0:
                        warehouses_with_stock.add(wh_name)
            
            print(f"   üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {len(warehouses_with_stock)}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∫–ª–∞–¥—ã —Ç–æ–ª—å–∫–æ —Å –∑–∞–∫–∞–∑–∞–º–∏ (–±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤)
            orders_only = warehouses_with_orders - warehouses_with_stock
            if orders_only:
                print(f"\n   ‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ —Å–∫–ª–∞–¥—ã —Ç–æ–ª—å–∫–æ —Å –∑–∞–∫–∞–∑–∞–º–∏ (–ë–ï–ó –æ—Å—Ç–∞—Ç–∫–æ–≤): {len(orders_only)}")
                for wh_name in list(orders_only)[:5]:
                    order_count = sum(1 for o in orders_data 
                                    if o.get('warehouseName') == wh_name 
                                    and not o.get('isCancel', False))
                    print(f"      - {wh_name}: {order_count} –∑–∞–∫–∞–∑–æ–≤, stock=0")
                print(f"      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –≠—Ç–∏ —Å–∫–ª–∞–¥—ã –ù–ï –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ!")
                print(f"         –¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç —Å–∫–ª–∞–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ warehouse_remains")
            else:
                print(f"   ‚úÖ –í—Å–µ —Å–∫–ª–∞–¥—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏–º–µ—é—Ç –æ—Å—Ç–∞—Ç–∫–∏")
        
        # ===== –¢–ï–°–¢ 5: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç =====
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*80)
        
        problems_found = []
        
        # –ü—Ä–æ–±–ª–µ–º–∞ 1: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        if warehouse_data and not any('ordersCount' in wh for item in warehouse_data for wh in item.get('warehouses', [])):
            problems_found.append({
                "id": 1,
                "severity": "–ö–†–ò–¢–ò–ß–ù–û",
                "description": "warehouse_remains –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç ordersCount",
                "impact": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ —ç—Ç–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞",
                "solution": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /supplier/orders —ç–Ω–¥–ø–æ–∏–Ω—Ç"
            })
        
        # –ü—Ä–æ–±–ª–µ–º–∞ 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        if transit_warehouse and total_orders_correct != transit_warehouse['quantity']:
            problems_found.append({
                "id": 2,
                "severity": "–ö–†–ò–¢–ò–ß–ù–û",
                "description": "–ó–∞–∫–∞–∑—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ '–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'",
                "impact": f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç—Ä–∞–Ω–∑–∏—Ç {transit_warehouse['quantity']} != –∑–∞–∫–∞–∑—ã {total_orders_correct})",
                "solution": "–£–±—Ä–∞—Ç—å –ª–æ–≥–∏–∫—É —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —Å–∫–ª–∞–¥–æ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å supplier/orders"
            })
        
        # –ü—Ä–æ–±–ª–µ–º–∞ 3: –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        if orders_only:
            problems_found.append({
                "id": 3,
                "severity": "–í–ê–ñ–ù–û",
                "description": f"–ù–∞–π–¥–µ–Ω—ã —Å–∫–ª–∞–¥—ã —Å –∑–∞–∫–∞–∑–∞–º–∏, –Ω–æ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(orders_only)}",
                "impact": "–≠—Ç–∏ —Å–∫–ª–∞–¥—ã –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –∑–∞–∫–∞–∑—ã —Ç–µ—Ä—è—é—Ç—Å—è",
                "solution": "–°–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–ª–∞–¥—ã –∏–∑ orders_data –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –≤ warehouse_remains"
            })
        
        # –ü—Ä–æ–±–ª–µ–º–∞ 4: orders_data –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        problems_found.append({
            "id": 4,
            "severity": "–ö–†–ò–¢–ò–ß–ù–û",
            "description": "–í product_service.py orders_data = [] (–ø—É—Å—Ç–æ–π)",
            "impact": "–†–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ /supplier/orders –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è",
            "solution": "–í—ã–∑—ã–≤–∞—Ç—å get_supplier_orders() –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ _convert_api_record_to_product()"
        })
        
        print(f"\nüö® –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {len(problems_found)}")
        print("-" * 80)
        
        for problem in problems_found:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê #{problem['id']}: [{problem['severity']}]")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {problem['description']}")
            print(f"   –í–ª–∏—è–Ω–∏–µ: {problem['impact']}")
            print(f"   –†–µ—à–µ–Ω–∏–µ: {problem['solution']}")
        
        print("\n" + "="*80)
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("="*80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            "timestamp": datetime.now().isoformat(),
            "problems_found": len(problems_found),
            "problems": problems_found,
            "warehouse_data_count": len(warehouse_data) if warehouse_data else 0,
            "orders_data_count": len(orders_data) if orders_data else 0,
            "warehouses_with_orders_only": list(orders_only) if orders_only else []
        }
        
        report_path = "warehouse_orders_diagnosis_report.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        print(f"üìÑ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: CRITICAL_WAREHOUSE_ORDERS_DIAGNOSIS.md")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        logger.error(f"Diagnosis failed: {e}")
        raise


if __name__ == "__main__":
    print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å '–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞'...")
    
    try:
        asyncio.run(diagnose_warehouse_orders())
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
