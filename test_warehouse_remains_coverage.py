"""
Test script to verify what warehouses are returned by warehouse_remains API.

This test will:
1. Fetch warehouse remains from WB API
2. Check what warehouse names are present
3. Specifically look for "–û–±—É—Ö–æ–≤–æ –ú–ü" (known FBS warehouse from orders)
4. Analyze if FBS warehouses are included in warehouse_remains
"""

import asyncio
import sys
from collections import Counter, defaultdict

# Add parent directory to path
sys.path.insert(0, r"c:\Users\miros\Downloads\Stock Tracker\Stock-Tracker")

from src.stock_tracker.api.client import create_wildberries_client
from src.stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


async def test_warehouse_remains_coverage():
    """Test what warehouses are included in warehouse_remains API."""
    
    print("\n" + "="*80)
    print("TEST: –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤ –≤ API warehouse_remains")
    print("="*80 + "\n")
    
    # Create WB API client
    client = create_wildberries_client()
    
    print("‚è≥ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ warehouse_remains...")
    
    try:
        # Create warehouse remains task
        task_id = await client.create_warehouse_remains_task(
            groupByNm=True,
            groupBySa=True
        )
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏...\n")
        
        # Wait for task to complete
        await asyncio.sleep(60)
        
        print("‚è≥ –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...")
        
        # Download warehouse remains
        warehouse_data = await client.download_warehouse_remains(task_id)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(warehouse_data)}")
        
        if not warehouse_data:
            print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º")
            return
        
        # Analyze warehouse structure
        print("\n" + "-"*80)
        print("–°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ô –ó–ê–ü–ò–°–ò:")
        print("-"*80)
        
        first_record = warehouse_data[0]
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
        for key in sorted(first_record.keys()):
            value = first_record[key]
            # Truncate long values
            if isinstance(value, str) and len(value) > 50:
                value = value[:50] + "..."
            print(f"  ‚Ä¢ {key}: {value}")
        
        # Extract all unique warehouses
        print("\n" + "-"*80)
        print("–ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í:")
        print("-"*80 + "\n")
        
        all_warehouses = set()
        warehouse_products = Counter()
        
        for record in warehouse_data:
            warehouses_list = record.get("warehouses", [])
            
            for wh in warehouses_list:
                wh_name = wh.get("warehouseName", "Unknown")
                all_warehouses.add(wh_name)
                warehouse_products[wh_name] += 1
        
        print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(all_warehouses)}")
        print("\n–¢–æ–ø-20 —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
        
        for i, (wh_name, count) in enumerate(warehouse_products.most_common(20), 1):
            print(f"  {i:2d}. {wh_name}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # Check for known FBS warehouse
        print("\n" + "-"*80)
        print("–ü–†–û–í–ï–†–ö–ê FBS –°–ö–õ–ê–î–ê:")
        print("-"*80 + "\n")
        
        fbs_warehouse = "–û–±—É—Ö–æ–≤–æ –ú–ü"
        
        if fbs_warehouse in all_warehouses:
            print(f"‚úÖ FBS —Å–∫–ª–∞–¥ '{fbs_warehouse}' –ù–ê–ô–î–ï–ù –≤ warehouse_remains!")
            
            # Count products on this warehouse
            count = warehouse_products[fbs_warehouse]
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}")
            
            # Find example product on this warehouse
            for record in warehouse_data:
                warehouses_list = record.get("warehouses", [])
                for wh in warehouses_list:
                    if wh.get("warehouseName") == fbs_warehouse:
                        print(f"\n   –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –Ω–∞ '{fbs_warehouse}':")
                        print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {record.get('vendorCode')}")
                        print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª WB: {record.get('nmId')}")
                        print(f"   ‚Ä¢ –ë–∞—Ä–∫–æ–¥: {record.get('barcode')}")
                        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {wh.get('quantity')}")
                        break
                else:
                    continue
                break
        else:
            print(f"‚ùå FBS —Å–∫–ª–∞–¥ '{fbs_warehouse}' –ù–ï –ù–ê–ô–î–ï–ù –≤ warehouse_remains!")
            print(f"\n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ ({len(all_warehouses)}):")
            for wh in sorted(all_warehouses):
                print(f"  ‚Ä¢ {wh}")
        
        # Analyze warehouse names to identify potential FBS warehouses
        print("\n" + "-"*80)
        print("–ü–û–ò–°–ö –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• FBS –°–ö–õ–ê–î–û–í:")
        print("-"*80 + "\n")
        
        # Keywords that might indicate FBS/MP warehouses
        fbs_keywords = ["–º–ø", "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "marketplace", "fbs", "seller"]
        
        potential_fbs = []
        for wh_name in all_warehouses:
            wh_lower = wh_name.lower()
            if any(keyword in wh_lower for keyword in fbs_keywords):
                potential_fbs.append(wh_name)
        
        if potential_fbs:
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö FBS —Å–∫–ª–∞–¥–æ–≤: {len(potential_fbs)}")
            for wh in sorted(potential_fbs):
                count = warehouse_products[wh]
                print(f"  ‚Ä¢ {wh}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            print("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö FBS —Å–∫–ª–∞–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        
        # CRITICAL ANALYSIS
        print("\n" + "="*80)
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
        print("="*80)
        
        if fbs_warehouse in all_warehouses:
            print(f"""
‚úÖ API warehouse_remains –í–ö–õ–Æ–ß–ê–ï–¢ FBS —Å–∫–ª–∞–¥—ã!

–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: {fbs_warehouse}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {warehouse_products[fbs_warehouse]}

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ:
1. API warehouse_remains –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã —Å–∫–ª–∞–¥–æ–≤ (FBO + FBS)
2. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ FBO –±—ã–ª–æ –û–®–ò–ë–û–ß–ù–´–ú
3. –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö (475 vs 3459) –≤—ã–∑–≤–∞–Ω–æ –î–†–£–ì–û–ô –ø—Ä–∏—á–∏–Ω–æ–π

–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º
‚Ä¢ –ë–∞–≥ –≤ –∫–æ–¥–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞—Ä–∫–æ–¥–∞–º–∏/–∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–¥–µ
            """)
        else:
            print(f"""
‚ùå API warehouse_remains –ù–ï –í–ö–õ–Æ–ß–ê–ï–¢ FBS —Å–∫–ª–∞–¥—ã!

–°–∫–ª–∞–¥ '{fbs_warehouse}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API.

–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ:
1. API warehouse_remains –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û FBO —Å–∫–ª–∞–¥—ã
2. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è FBS –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
3. –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (475 vs 3459) –≤—ã–∑–≤–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º FBS –¥–∞–Ω–Ω—ã—Ö

–†–ï–®–ï–ù–ò–ï:
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è FBS –æ—Å—Ç–∞—Ç–∫–æ–≤
–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ V2 API).
            """)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        client.close()


if __name__ == "__main__":
    asyncio.run(test_warehouse_remains_coverage())
