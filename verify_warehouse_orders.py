#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ "–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞" –≤ Google Sheets
–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import sys
import logging
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from stock_tracker.database.operations import SheetsOperations
from stock_tracker.database.sheets import GoogleSheetsClient
from stock_tracker.database.structure import SheetsTableStructure

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)8s] %(name)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)


async def verify_warehouse_orders():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö —Å–æ —Å–∫–ª–∞–¥–∞"""
    
    print("\n" + "="*80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–†–ò–ö–ò '–ó–ê–ö–ê–ó–´ –°–û –°–ö–õ–ê–î–ê'")
    print("="*80 + "\n")
    
    # Get spreadsheet ID from env
    import os
    spreadsheet_id = os.getenv("GOOGLE_SHEET_ID", "1baGNbGKDSvFA1Cghh08onoG9PDGnO19UFzXhdKC9Sho")
    
    # Initialize
    sheets_client = GoogleSheetsClient()
    operations = SheetsOperations(sheets_client=sheets_client)
    
    try:
        # Read products with retries (–≤ —Å–ª—É—á–∞–µ quota errors)
        print("üìã –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ Google Sheets...")
        print("   (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç quota error - –ø–æ–¥–æ–∂–¥—ë–º 60 —Å–µ–∫—É–Ω–¥)\n")
        
        max_retries = 3
        retry_delay = 60
        products = None
        
        for attempt in range(max_retries):
            try:
                products = operations.read_all_products(spreadsheet_id=spreadsheet_id)
                break
            except Exception as e:
                if "429" in str(e) and attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è  Quota error, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_delay}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
                    await asyncio.sleep(retry_delay)
                else:
                    raise
        
        if not products:
            print("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ\n")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}\n")
        
        # Analyze warehouse orders
        print("="*80)
        print("üìä –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–û–í –°–û –°–ö–õ–ê–î–ê")
        print("="*80 + "\n")
        
        zero_stock_with_orders = []
        products_with_orders = 0
        total_warehouses = 0
        marketplace_warehouses = []
        
        for product in products:
            article = product.article if hasattr(product, 'article') else "Unknown"
            warehouses = product.warehouses if hasattr(product, 'warehouses') else []
            total_warehouses += len(warehouses)
            
            has_orders = False
            
            for warehouse in warehouses:
                wh_name = warehouse.name if hasattr(warehouse, 'name') else "Unknown"
                stock = warehouse.stock if hasattr(warehouse, 'stock') else 0
                orders = warehouse.orders if hasattr(warehouse, 'orders') else 0
                
                # Check for marketplace warehouses
                if any(keyword in wh_name.lower() for keyword in ["–æ–±—É—Ö–æ–≤–æ", "–ø–æ–¥–æ–ª—å—Å–∫", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]):
                    marketplace_warehouses.append({
                        "article": article,
                        "warehouse": wh_name,
                        "stock": stock,
                        "orders": orders
                    })
                
                # Check for zero-stock warehouses with orders
                if stock == 0 and orders > 0:
                    zero_stock_with_orders.append({
                        "article": article,
                        "warehouse": wh_name,
                        "orders": orders
                    })
                
                if orders > 0:
                    has_orders = True
            
            if has_orders:
                products_with_orders += 1
        
        # Report: Zero-stock warehouses with orders
        print(f"1Ô∏è‚É£  –°–ö–õ–ê–î–´ –° –ù–£–õ–ï–í–´–ú–ò –û–°–¢–ê–¢–ö–ê–ú–ò –ò –ó–ê–ö–ê–ó–ê–ú–ò")
        print("-" * 80)
        
        if zero_stock_with_orders:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ —Å stock=0 –∏ orders>0: {len(zero_stock_with_orders)}\n")
            
            for item in zero_stock_with_orders[:10]:  # Show first 10
                print(f"   üì¶ {item['article']:<20} | {item['warehouse']:<30} | –ó–∞–∫–∞–∑—ã: {item['orders']}")
            
            if len(zero_stock_with_orders) > 10:
                print(f"\n   ... –∏ –µ—â—ë {len(zero_stock_with_orders) - 10} —Å–∫–ª–∞–¥–æ–≤")
        else:
            print("‚ö†Ô∏è  –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏ –ù–ï –ù–ê–ô–î–ï–ù–´")
            print("   (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
        
        print()
        
        # Report: Marketplace warehouses
        print(f"2Ô∏è‚É£  MARKETPLACE/FBS –°–ö–õ–ê–î–´")
        print("-" * 80)
        
        if marketplace_warehouses:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ marketplace —Å–∫–ª–∞–¥–æ–≤: {len(marketplace_warehouses)}\n")
            
            for item in marketplace_warehouses[:10]:  # Show first 10
                print(f"   üì¶ {item['article']:<20} | {item['warehouse']:<30} | Stock: {item['stock']:>4} | Orders: {item['orders']:>3}")
            
            if len(marketplace_warehouses) > 10:
                print(f"\n   ... –∏ –µ—â—ë {len(marketplace_warehouses) - 10} —Å–∫–ª–∞–¥–æ–≤")
        else:
            print("‚ö†Ô∏è  Marketplace —Å–∫–ª–∞–¥—ã –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        print()
        
        # Summary
        print("="*80)
        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*80)
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:                    {len(products)}")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏:               {products_with_orders}")
        print(f"   –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤:                      {total_warehouses}")
        print(f"   –°–∫–ª–∞–¥–æ–≤ —Å stock=0 –∏ orders>0:       {len(zero_stock_with_orders)}")
        print(f"   Marketplace —Å–∫–ª–∞–¥–æ–≤:                {len(marketplace_warehouses)}")
        print()
        
        # Verdict
        print("="*80)
        print("üéØ –í–ï–†–î–ò–ö–¢")
        print("="*80)
        
        if zero_stock_with_orders and marketplace_warehouses:
            print("‚úÖ –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("   - –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
            print("   - Marketplace/FBS —Å–∫–ª–∞–¥—ã –≤–∫–ª—é—á–µ–Ω—ã")
            print("   - –ó–∞–∫–∞–∑—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        elif zero_stock_with_orders:
            print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –ö–û–†–†–ï–ö–¢–ù–û")
            print("   ‚úÖ –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
            print("   ‚ùå Marketplace —Å–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–í–¢–û–†–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø")
            print("   –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_full_sync.py")
        
        print()
        
    except Exception as e:
        logger.error(f"Verification failed: {e}", exc_info=True)
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}\n")
        return


if __name__ == "__main__":
    asyncio.run(verify_warehouse_orders())
