#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ WAREHOUSE_FILTERING_PROMPT.md —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.core.calculator import (
    is_real_warehouse, 
    validate_warehouse_name, 
    debug_warehouse_data,
    WildberriesCalculator
)


def test_delivery_status_filtering():
    """–¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    print("üß™ Test 1: Delivery status filtering")
    
    test_data = [
        ("–¢—É–ª–∞", True),
        ("–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", True), 
        ("–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", False),
        ("–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB", False),
        ("–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", False),
        ("–ü–æ–¥–æ–ª—å—Å–∫ 3", True),
        ("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", True),
        ("–í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ü–í–ó", False),
        ("–û–±—â–∏–π –∏—Ç–æ–≥", False),
        ("", False),
        (None, False)
    ]
    
    passed = 0
    total = len(test_data)
    
    for name, expected in test_data:
        result = is_real_warehouse(name)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} '{name}': expected {expected}, got {result}")
        if result == expected:
            passed += 1
    
    print(f"üìä Result: {passed}/{total} tests passed")
    return passed == total


def test_warehouse_name_validation():
    """–¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤"""
    print("\nüß™ Test 2: Warehouse name validation")
    
    test_data = [
        ("–¢—É–ª–∞", True),
        ("–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", True),
        ("–ü–æ–¥–æ–ª—å—Å–∫ 3", True),
        ("–ú–æ—Å–∫–≤–∞ (–°–µ–≤–µ—Ä)", True),
        ("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", True),
        ("", False),
        ("123", False),
        ("English Name", False)  # –ù–µ—Ç —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
    ]
    
    passed = 0
    total = len(test_data)
    
    for name, expected in test_data:
        result = validate_warehouse_name(name)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} '{name}': expected {expected}, got {result}")
        if result == expected:
            passed += 1
    
    print(f"üìä Result: {passed}/{total} tests passed")
    return passed == total


def test_group_data_filtering():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("\nüß™ Test 3: Product data filtering")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–æ—Å—Ç–∞–≤–æ—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    warehouse_test_data = [
        {
            "nmId": 12345,
            "vendorCode": "TEST-001",
            "warehouses": [
                {"warehouseName": "–¢—É–ª–∞", "quantity": 100},
                {"warehouseName": "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "quantity": 50},  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
                {"warehouseName": "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", "quantity": 75},
                {"warehouseName": "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", "quantity": 200},  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
            ]
        }
    ]
    
    orders_test_data = [
        {
            "nmId": 12345,
            "supplierArticle": "TEST-001",
            "warehouseName": "–¢—É–ª–∞"
        },
        {
            "nmId": 12345,
            "supplierArticle": "TEST-001", 
            "warehouseName": "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
        },
        {
            "nmId": 12345,
            "supplierArticle": "TEST-001",
            "warehouseName": "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã"
        }
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
    grouped_data = WildberriesCalculator.group_data_by_product(
        warehouse_test_data, orders_test_data
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"  üìä Grouped data keys: {list(grouped_data.keys())}")
    
    if grouped_data:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
        first_key = list(grouped_data.keys())[0]
        warehouses = grouped_data[first_key]["warehouses"]
        warehouse_names = list(warehouses.keys())
        
        print(f"  üì¶ Found warehouses: {warehouse_names}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_statuses_found = []
        for name in warehouse_names:
            if not is_real_warehouse(name):
                delivery_statuses_found.append(name)
        
        if delivery_statuses_found:
            print(f"  ‚ùå Found delivery statuses in results: {delivery_statuses_found}")
            return False
        else:
            print("  ‚úÖ No delivery statuses found in warehouse data")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            real_warehouses = [name for name in warehouse_names if is_real_warehouse(name)]
            if real_warehouses:
                print(f"  ‚úÖ Real warehouses preserved: {real_warehouses}")
                return True
            else:
                print("  ‚ùå No real warehouses found")
                return False
    else:
        print("  ‚ùå Product not found in grouped data")
        return False


def test_debug_warehouse_data():
    """–¢–µ—Å—Ç 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ Test 4: Warehouse data debugging")
    
    test_data = [
        {
            "warehouses": [
                {"warehouseName": "–¢—É–ª–∞"},
                {"warehouseName": "–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"},
                {"warehouseName": "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã"},
                {"warehouseName": "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"}
            ]
        }
    ]
    
    results = debug_warehouse_data(test_data, "Test Data")
    
    expected_real = ["–¢—É–ª–∞", "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã"]
    expected_statuses = ["–í –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"]
    
    real_match = set(results["real_warehouses"]) == set(expected_real)
    status_match = set(results["delivery_statuses"]) == set(expected_statuses)
    
    print(f"  Real warehouses match: {'‚úÖ' if real_match else '‚ùå'}")
    print(f"  Delivery statuses match: {'‚úÖ' if status_match else '‚ùå'}")
    
    return real_match and status_match


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ WAREHOUSE FILTERING TESTS")
    print("=" * 50)
    
    tests = [
        test_delivery_status_filtering,
        test_warehouse_name_validation,
        test_group_data_filtering,
        test_debug_warehouse_data
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test failed with error: {e}")
    
    print(f"\nüèÅ FINAL RESULT: {passed}/{total} tests passed")
    print("=" * 50)
    
    if passed == total:
        print("üéâ ALL TESTS PASSED! Warehouse filtering works correctly.")
        return True
    else:
        print("‚ùå Some tests failed. Check the implementation.")
        return False


if __name__ == "__main__":
    run_all_tests()