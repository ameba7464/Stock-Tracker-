#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ "–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞".

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –í—ã–∑–æ–≤ supplier/orders API
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.services.product_service import ProductService
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


async def test_fixed_orders_logic():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤."""
    
    print("\n" + "="*80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò '–ó–ê–ö–ê–ó–´ –°–û –°–ö–õ–ê–î–ê'")
    print("="*80)
    
    try:
        service = ProductService()
        
        # –¢–µ—Å—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API
        print("\nüìã –¢–ï–°–¢ 1: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
        print("-" * 80)
        
        print("\n1.1 –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        sync_session = await service.sync_from_api_to_sheets()
        
        print(f"\n   ‚úÖ –°—Ç–∞—Ç—É—Å: {sync_session.status}")
        print(f"   üìä –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sync_session.products_processed}")
        print(f"   ‚ùå –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {sync_session.products_failed}")
        
        if sync_session.errors:
            print(f"\n   ‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
            for error in sync_session.errors[:5]:
                print(f"      - {error}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
        print("\n" + "="*80)
        print("üìã –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets")
        print("-" * 80)
        
        from stock_tracker.database.operations import SheetsOperations
        from stock_tracker.database.sheets import GoogleSheetsClient
        from stock_tracker.utils.config import get_config
        
        config = get_config()
        sheets_client = GoogleSheetsClient()
        operations = SheetsOperations(sheets_client)
        
        print("\n2.1 –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
        products = operations.read_all_products(config.google_sheets.sheet_id)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
        
        if products:
            print("\n2.2 –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 3 –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
            for i, product in enumerate(products[:3], 1):
                print(f"\n   –ü—Ä–æ–¥—É–∫—Ç {i}: {product.seller_article}")
                print(f"      nmId: {product.wildberries_article}")
                print(f"      –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {product.total_orders}")
                print(f"      –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {product.total_stock}")
                print(f"      –°–∫–ª–∞–¥–æ–≤: {len(product.warehouses)}")
                
                if product.warehouses:
                    print(f"      –°–∫–ª–∞–¥—ã:")
                    for wh in product.warehouses[:5]:
                        stock_str = f"stock={wh.stock}" if wh.stock > 0 else "stock=0 ‚ö†Ô∏è"
                        orders_str = f"orders={wh.orders}" if wh.orders > 0 else "orders=0"
                        print(f"         - {wh.name}: {stock_str}, {orders_str}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
                    zero_stock_warehouses = [wh for wh in product.warehouses if wh.stock == 0]
                    if zero_stock_warehouses:
                        print(f"      ‚úÖ –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {len(zero_stock_warehouses)}")
                        for wh in zero_stock_warehouses:
                            print(f"         - {wh.name}: orders={wh.orders}")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                warehouse_orders_sum = sum(wh.orders for wh in product.warehouses)
                if warehouse_orders_sum == product.total_orders:
                    print(f"      ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º = total_orders")
                else:
                    print(f"      ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è FAILED: {warehouse_orders_sum} != {product.total_orders}")
        
        # –¢–µ—Å—Ç 3: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*80)
        print("üìä –¢–ï–°–¢ 3: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("-" * 80)
        
        if products:
            total_products = len(products)
            products_with_orders = len([p for p in products if p.total_orders > 0])
            products_with_zero_stock_warehouses = len([p for p in products 
                                                      if any(wh.stock == 0 for wh in p.warehouses)])
            
            total_warehouses = sum(len(p.warehouses) for p in products)
            warehouses_with_zero_stock = sum(sum(1 for wh in p.warehouses if wh.stock == 0) 
                                            for p in products)
            
            print(f"\n   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}")
            print(f"   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: {products_with_orders}")
            print(f"   ‚ö†Ô∏è  –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞–º–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {products_with_zero_stock_warehouses}")
            print(f"\n   üì¶ –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {total_warehouses}")
            print(f"   ‚ö†Ô∏è  –°–∫–ª–∞–¥–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {warehouses_with_zero_stock}")
            
            if products_with_orders > 0:
                print(f"\n   ‚úÖ –£–°–ü–ï–•: {products_with_orders}/{total_products} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–º–µ—é—Ç –∑–∞–∫–∞–∑—ã")
            else:
                print(f"\n   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏!")
            
            if warehouses_with_zero_stock > 0:
                print(f"   ‚úÖ –£–°–ü–ï–•: –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è ({warehouses_with_zero_stock})")
        
        print("\n" + "="*80)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("="*80)
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
        report = {
            "timestamp": datetime.now().isoformat(),
            "sync_status": str(sync_session.status),
            "products_processed": sync_session.products_processed,
            "products_failed": sync_session.products_failed,
            "products_with_orders": products_with_orders if products else 0,
            "warehouses_with_zero_stock": warehouses_with_zero_stock if products else 0,
            "success": products_with_orders > 0 if products else False
        }
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
        print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ –£–°–ü–ï–•' if sync_session.status.name == 'COMPLETED' else '‚ùå –û–®–ò–ë–ö–ê'}")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏: {'‚úÖ –ï–°–¢–¨' if report['products_with_orders'] > 0 else '‚ùå –ù–ï–¢'}")
        print(f"   –°–∫–ª–∞–¥—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {'‚úÖ –û–¢–û–ë–†–ê–ñ–ê–Æ–¢–°–Ø' if report['warehouses_with_zero_stock'] > 0 else '‚ÑπÔ∏è  –ù–ï–¢ –¢–ê–ö–ò–•'}")
        
        return report
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        logger.error(f"Test failed: {e}")
        raise


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏...")
    
    try:
        report = asyncio.run(test_fixed_orders_logic())
        
        if report['success']:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            sys.exit(0)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
