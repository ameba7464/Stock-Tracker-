"""
КРИТИЧЕСКОЕ ИСПРАВЛЕНИЕ: refresh_table_data() использует НЕПРАВИЛЬНЫЙ API

ПРОБЛЕМА:
=========
refresh_table_data() в operations.py (строка 1313) получает заказы из Analytics API v2:
    orders_count = v2_metrics.get("ordersCount", 0)  # calculator.py строка 1066

Analytics API v2 возвращает АГРЕГИРОВАННЫЕ данные:
- ❌ Накапливает заказы за весь период (не только неделю)
- ❌ НЕ фильтрует отменённые заказы (isCancel)
- ❌ НЕ даёт детальную информацию (нет srid для дедупликации)
- ❌ НЕ позволяет точно задать период

РЕЗУЛЬТАТ:
- Таблица: 105, 77, 37 заказов (НЕПРАВИЛЬНО - накопленные данные)
- WB ground truth: 97, 68, 23 заказов (ПРАВИЛЬНО - Orders API v1)
- Расхождение: +8%, +13%, +61% (недопустимо!)

РЕШЕНИЕ:
========
refresh_table_data() должна использовать Orders API v1 (/api/v1/supplier/orders):
- ✅ Детальные данные по каждому заказу
- ✅ Флаг isCancel для фильтрации отменённых
- ✅ Поле srid для дедупликации
- ✅ Точный период через dateFrom
- ✅ Нормализация названий складов

ПЛАН ДЕЙСТВИЙ:
==============
1. Переписать refresh_table_data() чтобы вызывать Orders API v1
2. Скопировать логику из ProductService.sync_from_api_to_sheets() (строки 298-633)
3. Применить ВСЕ 9 исправлений:
   - Фильтрация отменённых заказов (isCancel=True)
   - Дедупликация по srid
   - Нормализация названий складов
   - Фиксированный период (начало недели)
   - Детальное логирование
   - Создание складов с нулевым остатком
   - Правильная обработка маркетплейс складов

АЛЬТЕРНАТИВНОЕ РЕШЕНИЕ (проще):
================================
Вместо переписывания refresh_table_data(), можно:
1. Удалить refresh_table_data() полностью
2. Сделать update_table.py вызывать ProductService.sync_from_api_to_sheets()
3. Это уже исправленный код с правильным API и всеми фиксами

РЕКОМЕНДАЦИЯ: АЛЬТЕРНАТИВНОЕ РЕШЕНИЕ
Причины:
- Меньше дублирования кода
- Все исправления уже применены в ProductService
- Проще поддерживать один код вместо двух
- ProductService уже протестирован (61→57 заказов, 100% успех)
"""

print(__doc__)

print("\n" + "="*80)
print("СЛЕДУЮЩИЙ ШАГ: Выбрать стратегию исправления")
print("="*80)
print("\nВариант A (быстро, надёжно):")
print("  1. Изменить update_table.py чтобы вызывать ProductService")
print("  2. Удалить refresh_table_data() из operations.py")
print("  3. Тестировать")
print("\nВариант B (больше работы):")
print("  1. Переписать refresh_table_data() с Orders API v1")
print("  2. Скопировать всю логику из ProductService")
print("  3. Поддерживать два одинаковых кода")
print("\nРЕКОМЕНДУЕМ: Вариант A")
