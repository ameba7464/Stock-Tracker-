#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç /api/v1/supplier/orders
–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import sys
import json
from pathlib import Path
from datetime import datetime, timedelta
from collections import Counter

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from stock_tracker.api.products import WildberriesProductDataFetcher
from stock_tracker.api.client import WildberriesAPIClient
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)

async def debug_supplier_orders_structure():
    """–ò–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ supplier/orders API"""
    
    print("\n" + "="*100)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê /api/v1/supplier/orders")
    print("="*100)
    print()
    
    # Initialize API client
    api_client = WildberriesAPIClient()
    fetcher = WildberriesProductDataFetcher(api_client)
    
    # Fetch orders
    date_from = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%dT00:00:00")
    print(f"üìÖ –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —Å: {date_from}")
    print(f"üîß flag=0")
    print()
    
    try:
        orders_data = await fetcher.fetch_supplier_orders(date_from=date_from, flag=0)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(orders_data)} –∑–∞–∫–∞–∑–æ–≤")
        print()
        
        if not orders_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # Show first order (all fields)
        print("="*100)
        print("üìã –ü–†–ò–ú–ï–† –û–î–ù–û–ì–û –ó–ê–ö–ê–ó–ê (–í–°–ï –ü–û–õ–Ø):")
        print("="*100)
        first_order = orders_data[0]
        print(json.dumps(first_order, indent=2, ensure_ascii=False))
        print()
        
        # Collect all unique fields
        print("="*100)
        print("üìä –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –í–û –í–°–ï–• –ó–ê–ö–ê–ó–ê–•:")
        print("="*100)
        all_fields = set()
        field_counts = Counter()
        field_examples = {}
        
        for order in orders_data:
            for field in order.keys():
                all_fields.add(field)
                field_counts[field] += 1
                if field not in field_examples and order[field]:
                    field_examples[field] = order[field]
        
        for field in sorted(all_fields):
            count = field_counts[field]
            percent = (count / len(orders_data)) * 100
            example = field_examples.get(field, "N/A")
            
            # Truncate long examples
            if isinstance(example, str) and len(example) > 50:
                example = example[:50] + "..."
            
            print(f"{field:<30} | {count:>6}/{len(orders_data)} ({percent:>5.1f}%) | –ü—Ä–∏–º–µ—Ä: {example}")
        
        print()
        
        # Analyze specific critical fields
        print("="*100)
        print("üîç –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô:")
        print("="*100)
        
        # 1. Check for unique IDs
        print("\n1Ô∏è‚É£  –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†–´:")
        unique_ids = ['srid', 'odid', 'gNumber', 'rid']
        for id_field in unique_ids:
            if id_field in all_fields:
                unique_values = set(order.get(id_field) for order in orders_data if order.get(id_field))
                print(f"   {id_field:<15} –Ω–∞–π–¥–µ–Ω–æ, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(unique_values)}")
            else:
                print(f"   {id_field:<15} –ù–ï –ù–ê–ô–î–ï–ù–û ‚ùå")
        
        # 2. Check for cancellation field
        print("\n2Ô∏è‚É£  –ü–û–õ–ï –û–¢–ú–ï–ù–´ –ó–ê–ö–ê–ó–ê:")
        cancel_fields = ['is_cancel', 'isCancel', 'cancel', 'cancelled', 'status']
        for cancel_field in cancel_fields:
            if cancel_field in all_fields:
                values = [order.get(cancel_field) for order in orders_data if cancel_field in order]
                value_counts = Counter(values)
                print(f"   {cancel_field:<15} –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–µ–Ω–∏—è: {dict(value_counts)}")
            else:
                print(f"   {cancel_field:<15} –ù–ï –ù–ê–ô–î–ï–ù–û")
        
        # 3. Check for quantity field
        print("\n3Ô∏è‚É£  –ü–û–õ–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê:")
        quantity_fields = ['quantity', 'qty', 'count', 'amount']
        for qty_field in quantity_fields:
            if qty_field in all_fields:
                values = [order.get(qty_field) for order in orders_data if order.get(qty_field)]
                if values:
                    avg_qty = sum(values) / len(values)
                    max_qty = max(values)
                    print(f"   {qty_field:<15} –Ω–∞–π–¥–µ–Ω–æ, —Å—Ä–µ–¥–Ω–µ–µ: {avg_qty:.2f}, –º–∞–∫—Å–∏–º—É–º: {max_qty}")
                else:
                    print(f"   {qty_field:<15} –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ")
            else:
                print(f"   {qty_field:<15} –ù–ï –ù–ê–ô–î–ï–ù–û")
        
        # 4. Check warehouse names
        print("\n4Ô∏è‚É£  –ù–ê–ó–í–ê–ù–ò–Ø –°–ö–õ–ê–î–û–í:")
        if 'warehouseName' in all_fields:
            warehouses = Counter(order.get('warehouseName') for order in orders_data if order.get('warehouseName'))
            print(f"   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
            print(f"   –¢–æ–ø-10 —Å–∫–ª–∞–¥–æ–≤:")
            for wh, count in warehouses.most_common(10):
                print(f"      {wh:<40} {count:>4} –∑–∞–∫–∞–∑–æ–≤")
        else:
            print("   warehouseName –ù–ï –ù–ê–ô–î–ï–ù–û ‚ùå")
        
        # 5. Check nmId
        print("\n5Ô∏è‚É£  –ê–†–¢–ò–ö–£–õ–´ (nmId):")
        if 'nmId' in all_fields:
            nm_ids = Counter(order.get('nmId') for order in orders_data if order.get('nmId'))
            print(f"   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö nmId: {len(nm_ids)}")
            print(f"   –¢–æ–ø-5 nmId:")
            for nm_id, count in nm_ids.most_common(5):
                print(f"      {nm_id:<20} {count:>4} –∑–∞–∫–∞–∑–æ–≤")
        else:
            print("   nmId –ù–ï –ù–ê–ô–î–ï–ù–û ‚ùå")
        
        # 6. Check dates
        print("\n6Ô∏è‚É£  –î–ê–¢–´:")
        date_fields = ['date', 'lastChangeDate', 'orderDate', 'created_at']
        for date_field in date_fields:
            if date_field in all_fields:
                dates = [order.get(date_field) for order in orders_data if order.get(date_field)]
                if dates:
                    print(f"   {date_field:<20} –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∏–º–µ—Ä: {dates[0]}")
                else:
                    print(f"   {date_field:<20} –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ")
            else:
                print(f"   {date_field:<20} –ù–ï –ù–ê–ô–î–ï–ù–û")
        
        print()
        
        # Calculate statistics
        print("="*100)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ê–ù–ù–´–ú:")
        print("="*100)
        
        # Group by nmId and warehouse
        orders_by_product = {}
        for order in orders_data:
            nm_id = order.get('nmId')
            wh_name = order.get('warehouseName', 'Unknown')
            key = (nm_id, wh_name)
            if key not in orders_by_product:
                orders_by_product[key] = []
            orders_by_product[key].append(order)
        
        print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders_data)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (nmId + —Å–∫–ª–∞–¥): {len(orders_by_product)}")
        print()
        
        print("–ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:")
        for (nm_id, wh_name), orders in list(orders_by_product.items())[:5]:
            print(f"   nmId={nm_id}, —Å–∫–ª–∞–¥={wh_name}: {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        
        print()
        
        # Recommendations
        print("="*100)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê:")
        print("="*100)
        
        recommendations = []
        
        # Check for unique ID
        has_unique_id = any(field in all_fields for field in ['srid', 'odid', 'gNumber'])
        if has_unique_id:
            id_field = next((f for f in ['srid', 'odid', 'gNumber'] if f in all_fields), None)
            recommendations.append(
                f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '{id_field}' –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"
            )
        else:
            recommendations.append(
                "‚ùå –ù–ï –ù–ê–ô–î–ï–ù —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞! –í–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã!"
            )
        
        # Check for cancellation
        has_cancel = any(field in all_fields for field in ['is_cancel', 'isCancel'])
        if has_cancel:
            cancel_field = next((f for f in ['is_cancel', 'isCancel'] if f in all_fields), None)
            recommendations.append(
                f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '{cancel_field}' –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
            )
        else:
            recommendations.append(
                "‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ - –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏"
            )
        
        # Check for quantity
        has_quantity = 'quantity' in all_fields
        if has_quantity:
            recommendations.append(
                "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'quantity' –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å >1)"
            )
        else:
            recommendations.append(
                "‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–ª–µ quantity - —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –∫–∞–∫ 1 —à—Ç"
            )
        
        for i, rec in enumerate(recommendations, 1):
            print(f"{i}. {rec}")
        
        print()
        
    except Exception as e:
        logger.error(f"Failed to fetch supplier orders: {e}", exc_info=True)
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print()


if __name__ == "__main__":
    asyncio.run(debug_supplier_orders_structure())
