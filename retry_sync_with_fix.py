#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è API quota.
"""

import asyncio
import time

async def wait_and_sync():
    """–ñ–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è quota –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    
    print("="*80)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û")
    print("="*80)
    
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞:")
    print("   'GoogleSheetsClient' object has no attribute 'service'")
    print("\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
    print("   - performance.py: –ó–∞–º–µ–Ω–µ–Ω –¥–æ—Å—Ç—É–ø –∫ service.spreadsheets()")
    print("   - –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è gspread.Client –Ω–∞–ø—Ä—è–º—É—é")
    print("   - Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ gspread API")
    
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets API quota...")
    print("   –¢–∞–π–º–µ—Ä: 90 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è)")
    
    for remaining in range(90, 0, -10):
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫—É–Ω–¥...", end="\r")
        await asyncio.sleep(10)
    
    print("\n\n" + "="*80)
    print("‚úÖ QUOTA –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê - –ó–ê–ü–£–°–ö –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("="*80)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
    from stock_tracker.services.product_service import ProductService
    
    print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProductService...")
    service = ProductService()
    
    print("\nüìä –ó–∞–ø—É—Å–∫ API-to-Sheets —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    result = await service.sync_from_api_to_sheets()
    
    print("\n" + "="*80)
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("="*80)
    
    if result.status.value == "completed":
        print(f"\n‚úÖ –£–°–ü–ï–•!")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.products_synced} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        print(f"   –í—Ä–µ–º—è: {result.duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        if result.errors:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(result.errors)} –æ—à–∏–±–æ–∫")
            for error in result.errors[:5]:
                print(f"      - {error}")
    else:
        print(f"\n‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.products_synced}/{result.total_products}")
        
        if result.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(result.errors)}):")
            for error in result.errors[:10]:
                print(f"      - {error}")
    
    print("\n" + "="*80)

if __name__ == "__main__":
    asyncio.run(wait_and_sync())
