#!/usr/bin/env python3
"""
Test Marketplace API v3 for FBS stocks
This should return the missing "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" warehouse stocks
"""

import requests
import json
from stock_tracker.utils.config import get_config

def main():
    config = get_config()
    
    print("\n" + "="*100)
    print("üîç –¢–ï–°–¢: Marketplace API v3 –¥–ª—è FBS –æ—Å—Ç–∞—Ç–∫–æ–≤")
    print("="*100)
    
    # First, we need to get warehouse IDs
    # Let's try the stocks endpoint without warehouseId to see what happens
    
    base_url = "https://marketplace-api.wildberries.ru/api/v3/stocks"
    
    headers = {
        'Authorization': config.wildberries_api_key,
        'Content-Type': 'application/json'
    }
    
    print(f"\nüì° Base URL: {base_url}")
    print(f"üîë API Key: {config.wildberries_api_key[:20]}...")
    
    # Try to get all stocks (without specific warehouseId)
    print("\n‚è≥ –ü–æ–ø—ã—Ç–∫–∞ 1: GET all stocks...")
    try:
        response = requests.get(base_url, headers=headers, timeout=30)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data) if isinstance(data, list) else 'N/A'}")
            
            # Look for Its1_2_3/50g
            if isinstance(data, list):
                target = [r for r in data if r.get('vendorCode') == 'Its1_2_3/50g' or r.get('supplierArticle') == 'Its1_2_3/50g']
                
                if target:
                    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è Its1_2_3/50g: {len(target)}")
                    print("\n–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:")
                    print(json.dumps(target[0], indent=2, ensure_ascii=False))
                    
                    # Sum up quantities
                    total = sum(r.get('quantity', 0) for r in target)
                    print(f"\nüìä –û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {total:,} —à—Ç")
                    
                    if total >= 2500:
                        print("‚úÖ –£–°–ü–ï–•! –≠—Ç–æ –±–ª–∏–∑–∫–æ –∫ –æ–∂–∏–¥–∞–µ–º—ã–º 2,993 —à—Ç –∏–∑ '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'!")
                else:
                    print("\n‚ö†Ô∏è Its1_2_3/50g –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    print("–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
                    for i, r in enumerate(data[:3], 1):
                        vendor = r.get('vendorCode') or r.get('supplierArticle', 'Unknown')
                        qty = r.get('quantity', 0)
                        print(f"  {i}. {vendor} - {qty} —à—Ç")
            else:
                print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
                print(json.dumps(data, indent=2, ensure_ascii=False)[:500])
        
        elif response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401)")
            print("   Marketplace API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞")
        
        elif response.status_code == 404:
            print("‚ö†Ô∏è 404 - Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å warehouseId –≤ URL")
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Try POST method
    print("\n‚è≥ –ü–æ–ø—ã—Ç–∫–∞ 2: POST with body...")
    try:
        # Try with empty body or minimal body
        body = {}
        response = requests.post(base_url, headers=headers, json=body, timeout=30)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            print(json.dumps(data, indent=2, ensure_ascii=False)[:1000])
        else:
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Try to get warehouses list first
    print("\n‚è≥ –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FBS —Å–∫–ª–∞–¥–æ–≤...")
    warehouses_url = "https://marketplace-api.wildberries.ru/api/v3/warehouses"
    
    try:
        response = requests.get(warehouses_url, headers=headers, timeout=30)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            warehouses = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses) if isinstance(warehouses, list) else 'N/A'}")
            
            if isinstance(warehouses, list):
                print("\nFBS —Å–∫–ª–∞–¥—ã:")
                for wh in warehouses:
                    wh_id = wh.get('id') or wh.get('warehouseId')
                    wh_name = wh.get('name') or wh.get('warehouseName')
                    print(f"  - ID: {wh_id}, Name: {wh_name}")
                    
                    # Check if "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" is in the list
                    if wh_name and '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' in wh_name.lower():
                        print(f"    ‚≠ê –ù–ê–ô–î–ï–ù –°–ö–õ–ê–î –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°!")
                
                # Try to get stocks for first warehouse
                if warehouses:
                    first_wh_id = warehouses[0].get('id') or warehouses[0].get('warehouseId')
                    if first_wh_id:
                        print(f"\n‚è≥ –ü–æ–ø—ã—Ç–∫–∞ 4: –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞ ID={first_wh_id}...")
                        stocks_url = f"{base_url}/{first_wh_id}"
                        response = requests.post(stocks_url, headers=headers, json={}, timeout=30)
                        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                        
                        if response.status_code == 200:
                            stocks = response.json()
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stocks) if isinstance(stocks, list) else 'N/A'}")
                            
                            if isinstance(stocks, list) and stocks:
                                print("\n–ü—Ä–∏–º–µ—Ä—ã –æ—Å—Ç–∞—Ç–∫–æ–≤:")
                                for s in stocks[:3]:
                                    print(json.dumps(s, indent=2, ensure_ascii=False))
        else:
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*100)
    print("üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("="*100)
    print("\n1. –ï—Å–ª–∏ Marketplace API —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print("   ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ FBS —Å–∫–ª–∞–¥–æ–≤")
    print("   ‚úÖ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
    print("   ‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Å FBO –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–∑ Statistics API")
    print("\n2. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω:")
    print("   üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é WB –Ω–∞ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Marketplace API")
    print("   üîë –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è FBS")

if __name__ == "__main__":
    main()
