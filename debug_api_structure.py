"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Wildberries API.
"""

import asyncio
import json
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from stock_tracker.api.client import WildberriesAPIClient
from stock_tracker.utils.logger import get_logger

logger = get_logger(__name__)


async def debug_api_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ API."""
    
    print("=" * 80)
    print("–û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• WILDBERRIES API")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = WildberriesAPIClient()
    
    try:
        print("\n1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É warehouse_remains...")
        task_id = await client.create_warehouse_remains_task()
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        print("\n2. –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å. 60 —Å–µ–∫)...")
        await asyncio.sleep(20)  # –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥
        
        print("\n3. –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ...")
        try:
            data = await client.download_warehouse_remains(task_id)
            
            if data and len(data) > 0:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                first_item = data[0]
                print("\n" + "=" * 80)
                print("–°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ô –ó–ê–ü–ò–°–ò:")
                print("=" * 80)
                print(json.dumps(first_item, indent=2, ensure_ascii=False))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                print("\n" + "=" * 80)
                print("–ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô:")
                print("=" * 80)
                
                print(f"\nüìã –ü–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:")
                for key in first_item.keys():
                    value = first_item[key]
                    value_type = type(value).__name__
                    print(f"  - {key}: {value_type}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º warehouses
                if 'warehouses' in first_item and isinstance(first_item['warehouses'], list):
                    print(f"\nüè≠ –°–∫–ª–∞–¥—ã (warehouses): {len(first_item['warehouses'])} —à—Ç")
                    
                    if len(first_item['warehouses']) > 0:
                        first_warehouse = first_item['warehouses'][0]
                        print(f"\nüì¶ –ü–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞:")
                        for key in first_warehouse.keys():
                            value = first_warehouse[key]
                            print(f"  - {key}: {value} (—Ç–∏–ø: {type(value).__name__})")
                        
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ordersCount
                        print("\n" + "=" * 80)
                        print("üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô:")
                        print("=" * 80)
                        
                        has_orders_count = 'ordersCount' in first_warehouse
                        has_orders_amount = 'ordersAmount' in first_warehouse
                        has_orders = 'orders' in first_warehouse
                        
                        print(f"  ‚ùì ordersCount: {'‚úÖ –ï–°–¢–¨' if has_orders_count else '‚ùå –ù–ï–¢'}")
                        print(f"  ‚ùì ordersAmount: {'‚úÖ –ï–°–¢–¨' if has_orders_amount else '‚ùå –ù–ï–¢'}")
                        print(f"  ‚ùì orders: {'‚úÖ –ï–°–¢–¨' if has_orders else '‚ùå –ù–ï–¢'}")
                        
                        if has_orders_count:
                            print(f"\n  ‚úÖ ordersCount = {first_warehouse['ordersCount']}")
                        if has_orders_amount:
                            print(f"\n  ‚úÖ ordersAmount = {first_warehouse['ordersAmount']}")
                        if has_orders:
                            print(f"\n  ‚úÖ orders = {first_warehouse['orders']}")
                        
                        if not (has_orders_count or has_orders_amount or has_orders):
                            print("\n  ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç –ø–æ–ª–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏!")
                            print("  üí° –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–∞–∑—ã –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ endpoint")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                output_file = "api_structure_debug.json"
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(data[:3], f, indent=2, ensure_ascii=False)  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                print(f"\nüíæ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
                
            else:
                print("‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            print(f"  –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        client.close()
    
    print("\n" + "=" * 80)
    print("–û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(debug_api_structure())
