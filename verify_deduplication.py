"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ WB API.
"""

import gspread
from google.oauth2.service_account import Credentials
import json


def get_sheets_client():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Google Sheets API"""
    scope = ['https://spreadsheets.google.com/feeds',
             'https://www.googleapis.com/auth/drive']
    
    creds = Credentials.from_service_account_file(
        'credentials.json', scopes=scope)
    return gspread.authorize(creds)


def verify_updated_products():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
    wb_reference = {
        "Its1_2_3/50g": {"orders": 7, "stock": 192},
        "Its2/50g": {"orders": 9, "stock": 132},
        "ItsSport2/50g": {"orders": 5, "stock": 185}
    }
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
    print("=" * 70)
    
    try:
        client = get_sheets_client()
        sheet = client.open_by_key("1baGNbGKDSvFA1Cghh08onoG9PDGnO19UFzXhdKC9Sho")
        worksheet = sheet.worksheet("Stock Tracker")
        
        # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = worksheet.row_values(1)
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {headers}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
        try:
            article_col = headers.index("–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞") + 1
            orders_col = headers.index("–ó–∞–∫–∞–∑–æ–≤") + 1
            stock_col = headers.index("–û—Å—Ç–∞—Ç–æ–∫") + 1
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ - {e}")
            return
        
        print(f"\nüìä –ö–æ–ª–æ–Ω–∫–∏: –ê—Ä—Ç–∏–∫—É–ª={article_col}, –ó–∞–∫–∞–∑–æ–≤={orders_col}, –û—Å—Ç–∞—Ç–æ–∫={stock_col}")
        print("\n" + "=" * 70)
        
        issues_found = []
        success_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
        for row_num in range(2, 5):  # –°—Ç—Ä–æ–∫–∏ 2-4 (Its1_2_3, Its2, ItsSport2)
            article = worksheet.cell(row_num, article_col).value
            orders = worksheet.cell(row_num, orders_col).value
            stock = worksheet.cell(row_num, stock_col).value
            
            if not article:
                continue
                
            print(f"\nüîé –°—Ç—Ä–æ–∫–∞ {row_num}: {article}")
            print(f"   üì¶ –û—Å—Ç–∞—Ç–æ–∫: {stock}")
            print(f"   üìã –ó–∞–∫–∞–∑–æ–≤: {orders}")
            
            if article in wb_reference:
                expected = wb_reference[article]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤
                orders_int = int(orders) if orders else 0
                stock_int = int(stock) if stock else 0
                
                orders_match = orders_int == expected["orders"]
                stock_match = stock_int == expected["stock"]
                
                if orders_match and stock_match:
                    print(f"   ‚úÖ –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å WB API")
                    success_count += 1
                else:
                    issue = {
                        "article": article,
                        "row": row_num,
                        "orders": {"sheets": orders_int, "wb": expected["orders"], "match": orders_match},
                        "stock": {"sheets": stock_int, "wb": expected["stock"], "match": stock_match}
                    }
                    issues_found.append(issue)
                    
                    if not orders_match:
                        diff = orders_int - expected["orders"]
                        pct = (diff / expected["orders"] * 100) if expected["orders"] > 0 else 0
                        print(f"   ‚ùå –ó–ê–ö–ê–ó–´: Sheets={orders_int}, WB={expected['orders']}, –†–∞–∑–Ω–∏—Ü–∞={diff:+d} ({pct:+.1f}%)")
                    
                    if not stock_match:
                        diff = stock_int - expected["stock"]
                        pct = (diff / expected["stock"] * 100) if expected["stock"] > 0 else 0
                        print(f"   ‚ö†Ô∏è  –û–°–¢–ê–¢–û–ö: Sheets={stock_int}, WB={expected['stock']}, –†–∞–∑–Ω–∏—Ü–∞={diff:+d} ({pct:+.1f}%)")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 70)
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: 3")
        print(f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å WB API: {success_count}/3")
        
        if issues_found:
            print(f"\n   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues_found)}")
            print("\nüìã –î–ï–¢–ê–õ–ò –ü–†–û–ë–õ–ï–ú:")
            for issue in issues_found:
                print(f"\n   ‚Ä¢ {issue['article']} (—Å—Ç—Ä–æ–∫–∞ {issue['row']}):")
                if not issue['orders']['match']:
                    print(f"     - –ó–∞–∫–∞–∑—ã: {issue['orders']['sheets']} –≤–º–µ—Å—Ç–æ {issue['orders']['wb']}")
                if not issue['stock']['match']:
                    print(f"     - –û—Å—Ç–∞—Ç–æ–∫: {issue['stock']['sheets']} –≤–º–µ—Å—Ç–æ {issue['stock']['wb']}")
        else:
            print("\n   üéâ –í–°–ï –î–ê–ù–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´!")
            print("   ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
        print("\n" + "=" * 70)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            "timestamp": "2025-10-27T18:30:00",
            "products_checked": 3,
            "products_correct": success_count,
            "issues_found": issues_found,
            "status": "SUCCESS" if len(issues_found) == 0 else "FAILED"
        }
        
        with open("deduplication_verification_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: deduplication_verification_report.json")
        
        return len(issues_found) == 0
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = verify_updated_products()
    exit(0 if success else 1)
