#!/usr/bin/env python3
"""
Get barcodes from Statistics API and test Marketplace stocks
"""

import requests
import json
from datetime import datetime, timedelta
from stock_tracker.utils.config import get_config

def main():
    config = get_config()
    
    print("\n" + "="*100)
    print("üîç –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–†–ö–û–î–û–í –∏–∑ Statistics API ‚Üí –¢–µ—Å—Ç Marketplace API")
    print("="*100)
    
    headers = {
        'Authorization': config.wildberries_api_key,
        'Content-Type': 'application/json'
    }
    
    # Step 1: Get barcodes from Statistics API
    print("\nüìä –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –±–∞—Ä–∫–æ–¥—ã –∏–∑ Statistics API...")
    
    stats_url = "https://statistics-api.wildberries.ru/api/v1/supplier/stocks"
    date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    
    params = {"dateFrom": date_from}
    
    response = requests.get(stats_url, headers=headers, params=params, timeout=30)
    
    if response.status_code != 200:
        print(f"‚ùå Statistics API error: {response.status_code}")
        print(response.text[:500])
        return
    
    stats_data = response.json()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(stats_data)}")
    
    # Extract barcodes for Its1_2_3/50g
    target_records = [r for r in stats_data if 'Its1_2_3' in r.get('supplierArticle', '')]
    
    if not target_records:
        print("‚ùå Its1_2_3/50g –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Statistics API")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π Its1_2_3/50g: {len(target_records)}")
    
    # Collect unique barcodes
    barcodes = set()
    for rec in target_records:
        barcode = rec.get('barcode')
        if barcode:
            barcodes.add(barcode)
    
    barcodes_list = list(barcodes)
    print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤: {len(barcodes_list)}")
    print(f"–ë–∞—Ä–∫–æ–¥—ã: {barcodes_list}")
    
    # Show sample data
    print("\nüìã –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–∑ Statistics API:")
    sample = target_records[0]
    for key in ['nmId', 'supplierArticle', 'barcode', 'warehouseName', 'quantity']:
        print(f"  {key}: {sample.get(key)}")
    
    # Step 2: Get FBS warehouses
    print("\nüì¶ –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º FBS —Å–∫–ª–∞–¥—ã...")
    warehouses_url = "https://marketplace-api.wildberries.ru/api/v3/warehouses"
    
    response = requests.get(warehouses_url, headers=headers)
    warehouses = response.json()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ FBS —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
    for wh in warehouses:
        print(f"  - ID: {wh.get('id')}, Name: {wh.get('name')}, DeliveryType: {wh.get('deliveryType')}")
    
    # Step 3: Get stocks from Marketplace API
    print("\nüì¶ –®–∞–≥ 3: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å FBS —Å–∫–ª–∞–¥–æ–≤...")
    
    for wh in warehouses:
        wh_id = wh.get('id')
        wh_name = wh.get('name')
        
        print(f"\n{'='*100}")
        print(f"–°–∫–ª–∞–¥: {wh_name} (ID: {wh_id})")
        print('='*100)
        
        stocks_url = f"https://marketplace-api.wildberries.ru/api/v3/stocks/{wh_id}"
        
        # Test 1: With specific barcodes
        print(f"\nüîç –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –±–∞—Ä–∫–æ–¥–∞–º–∏ ({len(barcodes_list)} —à—Ç)")
        body = {"skus": barcodes_list}
        
        response = requests.post(stocks_url, headers=headers, json=body, timeout=30)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            stocks_data = response.json()
            stocks = stocks_data.get('stocks', [])
            
            if stocks:
                total = sum(s.get('amount', 0) for s in stocks)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stocks)}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total} —à—Ç")
                
                for stock in stocks:
                    print(f"  - –ë–∞—Ä–∫–æ–¥: {stock.get('sku')}, –û—Å—Ç–∞—Ç–æ–∫: {stock.get('amount')} —à—Ç")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —ç—Ç–∏—Ö –±–∞—Ä–∫–æ–¥–æ–≤")
        else:
            error = response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text
            print(f"‚ùå –û—à–∏–±–∫–∞: {json.dumps(error, indent=2, ensure_ascii=False) if isinstance(error, dict) else error[:300]}")
        
        # Test 2: Empty array (all stocks)
        print(f"\nüîç –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –í–°–ï–• –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)")
        body = {"skus": []}
        
        response = requests.post(stocks_url, headers=headers, json=body, timeout=30)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            stocks_data = response.json()
            stocks = stocks_data.get('stocks', [])
            
            total = sum(s.get('amount', 0) for s in stocks)
            print(f"‚úÖ –í—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stocks)} –ø–æ–∑–∏—Ü–∏–π, {total} —à—Ç")
            
            # Look for our product
            target_stocks = [s for s in stocks if s.get('sku') in barcodes_list]
            if target_stocks:
                target_total = sum(s.get('amount', 0) for s in target_stocks)
                print(f"‚úÖ Its1_2_3/50g –Ω–∞–π–¥–µ–Ω: {len(target_stocks)} –±–∞—Ä–∫–æ–¥–æ–≤, {target_total} —à—Ç")
                
                for stock in target_stocks:
                    print(f"  - –ë–∞—Ä–∫–æ–¥: {stock.get('sku')}, –û—Å—Ç–∞—Ç–æ–∫: {stock.get('amount')} —à—Ç")
            else:
                print("‚ö†Ô∏è Its1_2_3/50g –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
                
                # Show sample of what's there
                if stocks:
                    print("\n–ü—Ä–∏–º–µ—Ä—ã –±–∞—Ä–∫–æ–¥–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
                    for stock in stocks[:5]:
                        print(f"  - {stock.get('sku')}: {stock.get('amount')} —à—Ç")
        else:
            error = response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text
            print(f"‚ùå –û—à–∏–±–∫–∞: {json.dumps(error, indent=2, ensure_ascii=False) if isinstance(error, dict) else error[:300]}")
    
    print("\n" + "="*100)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•")
    print("="*100)
    print(f"\nüìà Statistics API (FBO):")
    fbo_total = sum(r.get('quantity', 0) for r in target_records)
    print(f"  –ó–∞–ø–∏—Å–µ–π: {len(target_records)}")
    print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {fbo_total} —à—Ç")
    
    print(f"\nüì¶ Marketplace API (FBS):")
    print(f"  –°–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
    print(f"  (–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º. –≤—ã—à–µ)")
    
    print("\n" + "="*100)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("="*100)

if __name__ == "__main__":
    main()
