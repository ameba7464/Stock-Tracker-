#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API WB
"""

import asyncio
import sys
import json
from datetime import datetime, timedelta

sys.path.insert(0, 'c:/Users/miros/Downloads/Stock Tracker/Stock-Tracker/src')

from stock_tracker.api.client import WildberriesAPIClient
from stock_tracker.services.dual_api_stock_fetcher import DualAPIStockFetcher
from stock_tracker.utils.config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
try:
    sys.stdout.reconfigure(encoding='utf-8')
except:
    pass

config = get_config()

# –ê—Ä—Ç–∏–∫—É–ª—ã —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
ARTICLES = [
    {'supplier_article': 'Its1_2_3/50g', 'nm_id': 163383326, 'wb_orders': 65, 'tracker_orders': 103},
    {'supplier_article': 'Its2/50g', 'nm_id': 163383327, 'wb_orders': 52, 'tracker_orders': 61},
    {'supplier_article': 'Its2/50g+Aks5/20g', 'nm_id': 262310317, 'wb_orders': 16, 'tracker_orders': 22},
]


async def analyze_orders(article_info):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤"""
    print("=" * 100)
    print(f"üîç {article_info['supplier_article']} (NM ID: {article_info['nm_id']})")
    print("=" * 100)
    print()
    
    wb_client = WildberriesAPIClient(config.wildberries_api_key)
    
    print("üì¶ –ó–ê–ö–ê–ó–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)")
    print("-" * 100)
    
    date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    
    try:
        orders_list = await wb_client.get_supplier_orders(date_from=date_from)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ NM ID
        article_orders = [o for o in orders_list if o.get('nmId') == article_info['nm_id']]
        
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        active = []
        cancelled = []
        
        for order in article_orders:
            is_cancel = order.get('isCancel', False)
            if is_cancel:
                cancelled.append(order)
            else:
                active.append(order)
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ API: {len(article_orders)}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active)}")
        print(f"‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö: {len(cancelled)}")
        print()
        
        print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   WB –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (24-30 –æ–∫—Ç): {article_info['wb_orders']}")
        print(f"   Tracker (Google Sheets):   {article_info['tracker_orders']}")
        print(f"   API (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–π—á–∞—Å):     {len(active)}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑
        if len(active) == article_info['tracker_orders']:
            print(f"   ‚úÖ ‚úÖ ‚úÖ TRACKER –°–û–í–ü–ê–î–ê–ï–¢ –° API ({len(active)} –∑–∞–∫–∞–∑–æ–≤)")
            print(f"   üí° –ü—Ä–∏—á–∏–Ω–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è: WB —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ 24-30 –æ–∫—Ç ({article_info['wb_orders']} –∑–∞–∫–∞–∑–æ–≤)")
            print(f"       Tracker –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–∑–∂–µ –∏ –≤–∫–ª—é—á–∞–µ—Ç –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –∑–∞–∫–∞–∑—ã (+{len(active) - article_info['wb_orders']} –∑–∞–∫–∞–∑–æ–≤)")
        elif len(active) == article_info['wb_orders']:
            print(f"   ‚úÖ WB –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–í–ü–ê–î–ê–ï–¢ –° API ({len(active)} –∑–∞–∫–∞–∑–æ–≤)")
        else:
            print(f"   ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: API={len(active)}, WB Stats={article_info['wb_orders']}, Tracker={article_info['tracker_orders']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if active:
            print()
            print("   üìã –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–ø–µ—Ä–≤—ã–µ 3):")
            for i, order in enumerate(active[:3], 1):
                date = order.get('date', 'N/A')[:10]
                warehouse = order.get('warehouseName', 'N/A')
                status = order.get('finishedPrice', 0) / 100
                print(f"      {i}. –î–∞—Ç–∞: {date}, –°–∫–ª–∞–¥: {warehouse}, –¶–µ–Ω–∞: {status} —Ä—É–±")
        
        print()
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


def analyze_stocks(article_info):
    """–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    print()
    print("üì¶ –û–°–¢–ê–¢–ö–ò (Dual API: FBO + FBS)")
    print("-" * 100)
    
    try:
        dual_api = DualAPIStockFetcher(config.wildberries_api_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        result = dual_api.get_combined_stocks_by_article(
            supplier_article=article_info['supplier_article']
        )
        
        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {len(result)}")
            print()
            
            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
            for art, data in result.items():
                print(f"   üì¶ –ê—Ä—Ç–∏–∫—É–ª: {art}")
                print(f"      NM ID: {data.get('nm_id', 'N/A')}")
                print(f"      FBO –æ—Å—Ç–∞—Ç–∫–∏: {data.get('fbo_stock', 0):,} —à—Ç".replace(',', ' '))
                print(f"      FBS –æ—Å—Ç–∞—Ç–∫–∏: {data.get('fbs_stock', 0):,} —à—Ç".replace(',', ' '))
                print(f"      –í–°–ï–ì–û: {data.get('total_stock', 0):,} —à—Ç".replace(',', ' '))
                print(f"      –°–∫–ª–∞–¥–æ–≤ FBO: {len(data.get('fbo_details', []))}")
                print(f"      –°–∫–ª–∞–¥–æ–≤ FBS: {len(data.get('fbs_details', []))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∫–ª–∞–¥–æ–≤
                fbo_details = data.get('fbo_details', [])
                if fbo_details:
                    print(f"      –ü–µ—Ä–≤—ã–µ FBO —Å–∫–ª–∞–¥—ã:")
                    for i, detail in enumerate(fbo_details[:5], 1):
                        wh = detail.get('warehouseName', 'N/A')
                        qty = detail.get('quantityFull', 0)
                        print(f"         {i}. {wh:40} {qty:6} —à—Ç")
                
                print()
        else:
            print("‚ùå –ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API!")
        
        print()
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


async def main():
    print("=" * 100)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–°–•–û–ñ–î–ï–ù–ò–ô - –ü–†–Ø–ú–´–ï –ó–ê–ü–†–û–°–´ –ö API WB")
    print("=" * 100)
    print()
    
    for article in ARTICLES:
        await analyze_orders(article)
        analyze_stocks(article)
        print()
        print()


if __name__ == '__main__':
    asyncio.run(main())
