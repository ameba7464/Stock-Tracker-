#!/usr/bin/env python3
"""
Debug script to inspect actual API response structure for warehouse_remains
Specifically looking for "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" warehouse and additional quantity fields
"""

import sys
import os
import asyncio
import json

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.api.client import WildberriesAPIClient
from stock_tracker.utils.config import get_config

async def main():
    config = get_config()
    client = WildberriesAPIClient(config)
    
    print("\n" + "="*100)
    print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï API: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö warehouse_remains")
    print("="*100)
    
    # Create task
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É warehouse_remains...")
    task_id = await client.create_warehouse_remains_task()
    print(f"‚úÖ Task ID: {task_id}")
    
    # Wait for processing
    print("\n2Ô∏è‚É£ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏...")
    await asyncio.sleep(60)
    
    # Download data
    print("\n3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    data = await client.download_warehouse_remains(task_id)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # Find Its1_2_3/50g
    print("\n4Ô∏è‚É£ –ò—â–µ–º —Ç–æ–≤–∞—Ä Its1_2_3/50g...")
    target_product = None
    for record in data:
        if record.get('vendorCode') == 'Its1_2_3/50g':
            target_product = record
            break
    
    if not target_product:
        print("‚ùå –¢–æ–≤–∞—Ä Its1_2_3/50g –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API –æ—Ç–≤–µ—Ç–µ!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
        for i, record in enumerate(data[:5], 1):
            print(f"   {i}. {record.get('vendorCode', 'Unknown')}")
        return
    
    print("‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω!\n")
    
    # Analyze structure
    print("="*100)
    print("üì¶ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ü–ò–°–ò API:")
    print("="*100)
    print(json.dumps(target_product, indent=2, ensure_ascii=False))
    
    # Analyze warehouses
    print("\n" + "="*100)
    print("üè¢ –ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í:")
    print("="*100)
    
    warehouses = target_product.get('warehouses', [])
    print(f"\n–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤ –≤ API –æ—Ç–≤–µ—Ç–µ: {len(warehouses)}")
    
    if not warehouses:
        print("‚ùå –ú–∞—Å—Å–∏–≤ warehouses –ø—É—Å—Ç!")
        return
    
    # Check if "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" exists
    marketplace_found = False
    total_quantity = 0
    
    print("\n" + "-"*100)
    print(f"{'‚Ññ':<5} {'–°–∫–ª–∞–¥':<40} {'Quantity':<15} {'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'}")
    print("-"*100)
    
    for i, wh in enumerate(warehouses, 1):
        name = wh.get('warehouseName', 'Unknown')
        quantity = wh.get('quantity', 0)
        
        # Check for additional fields
        additional_fields = []
        for key in wh.keys():
            if key not in ['warehouseName', 'quantity']:
                additional_fields.append(f"{key}={wh[key]}")
        
        additional_str = ", ".join(additional_fields) if additional_fields else "-"
        
        print(f"{i:<5} {name:<40} {quantity:<15,} {additional_str}")
        
        total_quantity += quantity
        
        if "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" in name.lower() or "marketplace" in name.lower():
            marketplace_found = True
            print(f"{'':>5} ‚≠ê –ù–ê–ô–î–ï–ù –°–ö–õ–ê–î '–ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°'!")
    
    print("-"*100)
    print(f"–ò–¢–û–ì–û quantity: {total_quantity:,} —à—Ç")
    print("-"*100)
    
    # Analysis results
    print("\n" + "="*100)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("="*100)
    
    if marketplace_found:
        print("\n‚úÖ –°–∫–ª–∞–¥ '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –ù–ê–ô–î–ï–ù –≤ API –æ—Ç–≤–µ—Ç–µ")
        print("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ (—É–±–∏—Ä–∞–µ–º –∏–∑ blacklist)")
    else:
        print("\n‚ùå –°–∫–ª–∞–¥ '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –ù–ï –ù–ê–ô–î–ï–ù –≤ API –æ—Ç–≤–µ—Ç–µ")
        print("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∞–º–æ–º API –∏–ª–∏ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π endpoint")
    
    print(f"\nüìà API –≤–µ—Ä–Ω—É–ª: {total_quantity:,} —à—Ç")
    print(f"üìã CSV –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: 3,478 —à—Ç")
    print(f"‚ùå –†–∞–∑–Ω–∏—Ü–∞: {3478 - total_quantity:,} —à—Ç ({((3478 - total_quantity) / 3478 * 100):.1f}%)")
    
    # Check for additional quantity fields
    print("\n" + "="*100)
    print("üîé –ü–†–û–í–ï–†–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô QUANTITY:")
    print("="*100)
    
    if warehouses:
        sample_wh = warehouses[0]
        print(f"\n–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã warehouse (–ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥):")
        print(json.dumps(sample_wh, indent=2, ensure_ascii=False))
        
        # Look for quantity-related fields
        quantity_fields = [k for k in sample_wh.keys() if 'quantity' in k.lower() or 'orders' in k.lower() or 'stock' in k.lower()]
        
        if len(quantity_fields) > 1:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å quantity: {quantity_fields}")
            print("   ‚Üí –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π")
        else:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ: {quantity_fields}")
            print("   ‚Üí –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π API endpoint")
    
    print("\n" + "="*100)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("="*100)
    
    if marketplace_found:
        print("\n1. –£–±—Ä–∞—Ç—å '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
        print("2. –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç ~3,478 —à—Ç")
    else:
        print("\n1. API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–∞–¥ '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'")
        print("2. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints:")
        print("   - /api/v2/stocks")
        print("   - /api/v1/supplier/stocks")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é WB –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π:")
        print("   - quantityInOrders")
        print("   - quantityInTransit")
        print("   - marketplaceQuantity")

if __name__ == "__main__":
    asyncio.run(main())
