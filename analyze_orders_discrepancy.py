#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ –º–µ—Ç—Ä–∏–∫–µ "–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞" –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ WB –∏ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ–π
"""

import csv
from collections import defaultdict
from pathlib import Path

# Paths
wb_file = r"c:\Users\miros\Downloads\28-10-2025 –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å 22-10-2025 –ø–æ 28-10-2025_export.csv"
our_file = r"c:\Users\miros\Downloads\Stock Tracker - Stock Tracker (3).csv"

print("="*100)
print("üîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –í –ú–ï–¢–†–ò–ö–ï '–ó–ê–ö–ê–ó–´ –°–û –°–ö–õ–ê–î–ê'")
print("="*100)
print()

# Parse WB data
wb_data = defaultdict(lambda: defaultdict(int))
print("üìä –î–ê–ù–ù–´–ï –û–¢ WILDBERRIES (22-28 –æ–∫—Ç—è–±—Ä—è 2025):")
print("-" * 100)

with open(wb_file, 'r', encoding='utf-8-sig') as f:
    reader = csv.DictReader(f)
    for row in reader:
        article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']
        warehouse = row['–°–∫–ª–∞–¥']
        orders_str = row['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç']
        
        # Skip empty orders
        if not orders_str or orders_str == '':
            continue
            
        orders = int(orders_str)
        wb_data[article][warehouse] = orders

# Print WB data summary
for article in sorted(wb_data.keys()):
    warehouses = wb_data[article]
    total_orders = sum(warehouses.values())
    print(f"\nüì¶ {article}: –í–°–ï–ì–û {total_orders} –∑–∞–∫–∞–∑–æ–≤")
    for wh, orders in sorted(warehouses.items(), key=lambda x: -x[1])[:5]:  # Top 5
        print(f"   ‚îî‚îÄ {wh}: {orders} –∑–∞–∫–∞–∑–æ–≤")

print("\n")
print("="*100)
print("üìä –ù–ê–®–ê –¢–ê–ë–õ–ò–¶–ê (Stock Tracker):")
print("-" * 100)

# Parse our data
our_data = defaultdict(lambda: defaultdict(int))

with open(our_file, 'r', encoding='utf-8-sig') as f:
    reader = csv.DictReader(f)
    for row in reader:
        article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']
        total_orders_str = row['–ó–∞–∫–∞–∑—ã (–≤—Å–µ–≥–æ)']
        
        if not total_orders_str or total_orders_str == '':
            continue
            
        total_orders = int(total_orders_str)
        
        # Parse warehouses and their orders
        warehouses_str = row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞']
        orders_str = row['–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞']
        
        if not warehouses_str or not orders_str:
            continue
            
        warehouses_list = [w.strip() for w in warehouses_str.split('\n')]
        orders_list = [o.strip() for o in orders_str.split('\n')]
        
        for wh, ord_str in zip(warehouses_list, orders_list):
            if ord_str and ord_str.isdigit():
                our_data[article][wh] = int(ord_str)

# Print our data summary
for article in sorted(our_data.keys()):
    warehouses = our_data[article]
    total_orders = sum(warehouses.values())
    print(f"\nüì¶ {article}: –í–°–ï–ì–û {total_orders} –∑–∞–∫–∞–∑–æ–≤")
    for wh, orders in sorted(warehouses.items(), key=lambda x: -x[1])[:5]:  # Top 5
        print(f"   ‚îî‚îÄ {wh}: {orders} –∑–∞–∫–∞–∑–æ–≤")

print("\n")
print("="*100)
print("‚ö†Ô∏è  –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
print("-" * 100)

# Compare data
all_articles = set(wb_data.keys()) | set(our_data.keys())

total_wb_orders = 0
total_our_orders = 0
total_missing_orders = 0
critical_errors = []

for article in sorted(all_articles):
    wb_total = sum(wb_data[article].values())
    our_total = sum(our_data[article].values())
    
    total_wb_orders += wb_total
    total_our_orders += our_total
    
    if wb_total == 0 and our_total == 0:
        continue
    
    diff = our_total - wb_total
    diff_percent = ((our_total - wb_total) / wb_total * 100) if wb_total > 0 else 0
    
    print(f"\nüì¶ {article}:")
    print(f"   WB –¥–∞–Ω–Ω—ã–µ:      {wb_total} –∑–∞–∫–∞–∑–æ–≤")
    print(f"   –ù–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞:   {our_total} –∑–∞–∫–∞–∑–æ–≤")
    print(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:    {diff:+d} –∑–∞–∫–∞–∑–æ–≤ ({diff_percent:+.1f}%)")
    
    if abs(diff_percent) > 20:
        status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û"
        critical_errors.append({
            'article': article,
            'wb': wb_total,
            'ours': our_total,
            'diff': diff,
            'diff_percent': diff_percent
        })
    elif abs(diff_percent) > 10:
        status = "‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
    else:
        status = "‚úÖ –û–ö"
    
    print(f"   –°—Ç–∞—Ç—É—Å:         {status}")
    
    # Compare warehouses
    all_warehouses = set(wb_data[article].keys()) | set(our_data[article].keys())
    
    for wh in sorted(all_warehouses):
        wb_orders = wb_data[article].get(wh, 0)
        our_orders = our_data[article].get(wh, 0)
        
        if wb_orders != our_orders:
            print(f"      ‚îî‚îÄ {wh}: WB={wb_orders}, –¢–∞–±–ª–∏—Ü–∞={our_orders} ({our_orders-wb_orders:+d})")

print("\n")
print("="*100)
print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("-" * 100)
print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ WB:        {total_wb_orders}")
print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ:    {total_our_orders}")
print(f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:                {total_our_orders - total_wb_orders:+d} ({(total_our_orders - total_wb_orders)/total_wb_orders*100:+.1f}%)")
print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:         {len(critical_errors)}")
print()

if critical_errors:
    print("="*100)
    print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ > 20%):")
    print("-" * 100)
    for err in critical_errors:
        print(f"\nüì¶ {err['article']}")
        print(f"   WB: {err['wb']} –∑–∞–∫–∞–∑–æ–≤")
        print(f"   –¢–∞–±–ª–∏—Ü–∞: {err['ours']} –∑–∞–∫–∞–∑–æ–≤")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞: {err['diff']:+d} –∑–∞–∫–∞–∑–æ–≤ ({err['diff_percent']:+.1f}%)")

print("\n")
print("="*100)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:")
print("-" * 100)

# Check period
print("\n1Ô∏è‚É£  –ü–ï–†–ò–û–î –î–ê–ù–ù–´–•:")
print("   WB –≤—ã–≥—Ä—É–∑–∫–∞: 22-28 –æ–∫—Ç—è–±—Ä—è 2025 (7 –¥–Ω–µ–π)")
print("   –ù–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞: –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API")
print("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω!")
print()

# Check API source
print("2Ô∏è‚É£  –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–• API:")
print("   –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: supplier/orders —Å dateFrom = 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
print("   WB –≤—ã–≥—Ä—É–∑–∫–∞: –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
print("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –†–∞–∑–Ω—ã–µ endpoints –∏ –ø–µ—Ä–∏–æ–¥—ã!")
print()

# Check calculation method
print("3Ô∏è‚É£  –ú–ï–¢–û–î –†–ê–°–ß–Å–¢–ê:")
print("   –ù–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: COUNT(orders WHERE nmId=X AND warehouseName=Y)")
print("   WB –≤—ã–≥—Ä—É–∑–∫–∞: '–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç' - —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
print("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–∂–µ–º —Å—á–∏—Ç–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏!")
print()

print("="*100)
print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
print("-" * 100)

print("""
1Ô∏è‚É£  –ü–†–û–ë–õ–ï–ú–ê –° –ü–ï–†–ò–û–î–û–ú:
   ‚ùå –°–µ–π—á–∞—Å: dateFrom = 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è)
   ‚úÖ –ù—É–∂–Ω–æ: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥ —Å —Ç–∞–±–ª–∏—Ü–µ–π WB –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   
   –†–µ—à–µ–Ω–∏–µ:
   - –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞/–Ω–µ–¥–µ–ª–∏)
   - –ò–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

2Ô∏è‚É£  –ü–†–û–ë–õ–ï–ú–ê –° ENDPOINT:
   ‚ùå –°–µ–π—á–∞—Å: GET /api/v1/supplier/orders?dateFrom=...&flag=0
   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π:
      - flag=0 vs flag=1 (—Ä–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö)
      - –ó–∞–∫–∞–∑—ã –º–æ–≥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–æ–≤)
      - –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–∫–ª—é—á–∞—é—Ç—Å—è/–∏—Å–∫–ª—é—á–∞—é—Ç—Å—è
   
   –†–µ—à–µ–Ω–∏–µ:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é WB –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è flag –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
   - –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞ (is_cancel, is_realization)
   - –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID (srid, odid, gNumber)

3Ô∏è‚É£  –ü–†–û–ë–õ–ï–ú–ê –° –ü–û–î–°–ß–Å–¢–û–ú:
   ‚ùå –°–µ–π—á–∞—Å: –ü—Ä–æ—Å—Ç–æ COUNT(orders)
   ‚ö†Ô∏è  –ù–µ —É—á–∏—Ç—ã–≤–∞–µ–º:
      - –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (is_cancel)
      - –°—Ç–∞—Ç—É—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (is_realization)
      - –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –∑–∞–∫–∞–∑—É
   
   –†–µ—à–µ–Ω–∏–µ:
   - –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å: WHERE is_cancel = False OR is_cancel IS NULL
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å quantity, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ count)

4Ô∏è‚É£  –ü–†–û–ë–õ–ï–ú–ê –° –ú–ê–ü–ü–ò–ù–ì–û–ú –°–ö–õ–ê–î–û–í:
   ‚ùå –°–µ–π—á–∞—Å: warehouseName –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
   ‚ö†Ô∏è  –ù–∞–∑–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è:
      - "–ü–æ–¥–æ–ª—å—Å–∫ 3" vs "–ü–æ–¥–æ–ª—å—Å–∫-3"
      - "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π 12" vs "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
   
   –†–µ—à–µ–Ω–∏–µ:
   - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
   - –°–æ–∑–¥–∞—Ç—å mapping —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
""")

print("\n")
print("="*100)
print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
print("-" * 100)
print("""
1. –ò–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç /api/v1/supplier/orders
   - –ö–∞–∫–∏–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã?
   - –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç flag=0 vs flag=1?
   - –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ is_cancel, is_realization?
   - –ö–∞–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ (srid, odid, gNumber)?

2. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
   - WHERE is_cancel = False

3. –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å set() –∏–ª–∏ dict –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å last_sync

5. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   - –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
   - –°–∫–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–æ—Ç–º–µ–Ω–µ–Ω—ã)
   - –°–∫–æ–ª—å–∫–æ –∑–∞–¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ
   - –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
""")

print("\n" + "="*100)
