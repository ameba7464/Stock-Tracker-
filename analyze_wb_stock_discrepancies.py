"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É Stock Tracker –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º Wildberries.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ WB –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –µ–≥–æ —Å –ª–æ–≥–∏–∫–æ–π
–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Stock Tracker –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π.
"""

import csv
import json
from pathlib import Path
from typing import Dict, List, Set, Tuple
from collections import defaultdict
import re


class WBDiscrepancyAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É WB –æ—Ç—á–µ—Ç–æ–º –∏ Stock Tracker."""
    
    def __init__(self, csv_file_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ WB
        """
        self.csv_file_path = csv_file_path
        self.wb_data = []
        self.products = {}
        self.warehouses_by_product = defaultdict(dict)
        self.warehouse_names = set()
        
    def load_csv_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å CSV —Ñ–∞–π–ª WB."""
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {self.csv_file_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        with open(self.csv_file_path, 'r', encoding='utf-8-sig') as f:
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            first_line = f.readline()
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ö–¢" - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if '–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ö–¢' in first_line or '–û—Å—Ç–∞—Ç–∫–∏ –ø–æ' in first_line:
                print("   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã WB")
                # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                pass
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª CSV –∑–∞–≥–æ–ª–æ–≤–æ–∫
                f.seek(0)
            
            reader = csv.DictReader(f)
            for row in reader:
                self.wb_data.append(row)
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.wb_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–ª–æ–Ω–æ–∫
        if self.wb_data:
            print(f"   üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: {list(self.wb_data[0].keys())[:5]}...")
        
    def analyze_warehouse_names(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤."""
        print("\nüè™ –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤ –≤ WB –æ—Ç—á–µ—Ç–µ:")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã
        for row in self.wb_data:
            warehouse_name = row.get('–°–∫–ª–∞–¥', '').strip()
            if warehouse_name:
                self.warehouse_names.add(warehouse_name)
        
        print(f"   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(self.warehouse_names)}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤
        marketplace_warehouses = []
        regular_warehouses = []
        virtual_warehouses = []
        unknown_warehouses = []
        
        for warehouse in sorted(self.warehouse_names):
            warehouse_lower = warehouse.lower()
            
            # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å/FBS —Å–∫–ª–∞–¥—ã
            if any(indicator in warehouse_lower for indicator in 
                   ['–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', 'marketplace', '—Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞', 'fbs']):
                marketplace_warehouses.append(warehouse)
            # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            elif '–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π' in warehouse_lower:
                virtual_warehouses.append(warehouse)
            # –û–±—ã—á–Ω—ã–µ —Å–∫–ª–∞–¥—ã (–≥–æ—Ä–æ–¥–∞)
            elif any(char.isalpha() for char in warehouse):
                regular_warehouses.append(warehouse)
            else:
                unknown_warehouses.append(warehouse)
        
        print(f"\n   üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–ª–∞–¥–æ–≤:")
        print(f"      ‚Ä¢ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å/FBS: {len(marketplace_warehouses)}")
        for wh in marketplace_warehouses:
            print(f"         - {wh}")
        
        print(f"\n      ‚Ä¢ –û–±—ã—á–Ω—ã–µ —Å–∫–ª–∞–¥—ã WB: {len(regular_warehouses)}")
        for wh in regular_warehouses[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"         - {wh}")
        if len(regular_warehouses) > 10:
            print(f"         ... –∏ –µ—â—ë {len(regular_warehouses) - 10}")
        
        print(f"\n      ‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {len(virtual_warehouses)}")
        for wh in virtual_warehouses:
            print(f"         - {wh}")
        
        if unknown_warehouses:
            print(f"\n      ‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ: {len(unknown_warehouses)}")
            for wh in unknown_warehouses:
                print(f"         - {wh}")
        
        return {
            'marketplace': marketplace_warehouses,
            'regular': regular_warehouses,
            'virtual': virtual_warehouses,
            'unknown': unknown_warehouses
        }
    
    def group_by_product(self):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º."""
        print("\nüì¶ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º:")
        
        for row in self.wb_data:
            seller_article = row.get('–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞', '').strip()
            wb_article = row.get('–ê—Ä—Ç–∏–∫—É–ª WB', '').strip()
            warehouse = row.get('–°–∫–ª–∞–¥', '').strip()
            region = row.get('–†–µ–≥–∏–æ–Ω', '').strip()
            availability = row.get('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', '').strip()
            
            # –ó–∞–∫–∞–∑—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏
            orders_str = row.get('–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç', '').strip()
            stock_str = row.get('–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç', '').strip()
            
            try:
                orders = int(orders_str) if orders_str and orders_str.isdigit() else 0
            except (ValueError, AttributeError):
                orders = 0
            
            try:
                stock = int(stock_str) if stock_str and stock_str.isdigit() else 0
            except (ValueError, AttributeError):
                stock = 0
            
            if not seller_article or not wb_article:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –ø—Ä–æ–¥—É–∫—Ç–∞
            product_key = (seller_article, wb_article)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if product_key not in self.products:
                self.products[product_key] = {
                    'seller_article': seller_article,
                    'wb_article': wb_article,
                    'total_orders': 0,
                    'total_stock': 0,
                    'warehouses': {}
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–∞–¥
            if warehouse not in self.products[product_key]['warehouses']:
                self.products[product_key]['warehouses'][warehouse] = {
                    'region': region,
                    'availability': availability,
                    'orders': 0,
                    'stock': 0
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∫–ª–∞–¥—É
            self.products[product_key]['warehouses'][warehouse]['orders'] += orders
            self.products[product_key]['warehouses'][warehouse]['stock'] += stock
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
            self.products[product_key]['total_orders'] += orders
            self.products[product_key]['total_stock'] += stock
        
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.products)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
        
    def analyze_marketplace_impact(self):
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –∑–∞–∫–∞–∑—ã."""
        print("\nüíº –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:")
        
        marketplace_products = []
        total_marketplace_stock = 0
        total_marketplace_orders = 0
        
        for product_key, product_data in self.products.items():
            seller_article = product_data['seller_article']
            
            # –ò—â–µ–º –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Å—Ä–µ–¥–∏ —Å–∫–ª–∞–¥–æ–≤
            marketplace_data = None
            for warehouse_name, warehouse_data in product_data['warehouses'].items():
                if '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' in warehouse_name.lower() or 'marketplace' in warehouse_name.lower():
                    marketplace_data = warehouse_data
                    break
            
            if marketplace_data:
                mp_stock = marketplace_data['stock']
                mp_orders = marketplace_data['orders']
                total_stock = product_data['total_stock']
                
                if mp_stock > 0 or mp_orders > 0:
                    percentage = (mp_stock / total_stock * 100) if total_stock > 0 else 0
                    
                    marketplace_products.append({
                        'article': seller_article,
                        'mp_stock': mp_stock,
                        'mp_orders': mp_orders,
                        'total_stock': total_stock,
                        'percentage': percentage
                    })
                    
                    total_marketplace_stock += mp_stock
                    total_marketplace_orders += mp_orders
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
        marketplace_products.sort(key=lambda x: x['percentage'], reverse=True)
        
        print(f"\n   üìä –ü—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–∫–ª–∞–¥–æ–º –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {len(marketplace_products)}")
        print(f"   üì¶ –û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {total_marketplace_stock}")
        print(f"   üìã –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã —Å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {total_marketplace_orders}")
        
        print("\n   üîù –¢–û–ü-10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –¥–æ–ª–µ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:")
        for i, product in enumerate(marketplace_products[:10], 1):
            print(f"      {i}. {product['article']}")
            print(f"         –û—Å—Ç–∞—Ç–∫–∏ –ú–ü: {product['mp_stock']} –∏–∑ {product['total_stock']} ({product['percentage']:.1f}%)")
            print(f"         –ó–∞–∫–∞–∑—ã –ú–ü: {product['mp_orders']}")
        
        return marketplace_products
    
    def check_warehouse_filtering_logic(self, warehouse_categories: Dict[str, List[str]]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤:")
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É is_real_warehouse –∏–∑ calculator.py
        def is_real_warehouse_emulated(warehouse_name: str) -> bool:
            """–≠–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ is_real_warehouse –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
            if not warehouse_name:
                return False
            
            warehouse_lower = warehouse_name.lower()
            
            # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            delivery_statuses = {
                "–≤ –ø—É—Ç–∏ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
                "–≤ –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥ wb",
                "–≤—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö",
                "–≤ –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–≤–∑",
                "–≤ –ø—É—Ç–∏ —Å –ø–≤–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é",
                "—É–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –≤–æ–∑–º–µ—â–µ–Ω–∏—è",
                "–∫ –¥–æ–ø–ª–∞—Ç–µ",
                "–æ–±—â–∏–π –∏—Ç–æ–≥"
            }
            
            if warehouse_name in delivery_statuses:
                return False
            
            if any(word in warehouse_lower for word in ["–∏—Ç–æ–≥", "–≤—Å–µ–≥–æ", "–æ–±—â–∏–π"]):
                return False
            
            if "–≤ –ø—É—Ç–∏" in warehouse_lower:
                return False
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
            marketplace_indicators = [
                "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "marketplace",
                "—Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "—Å–∫–ª–∞–¥ —Å–µ–ª–ª–µ—Ä–∞",
                "fbs", "–º–ø ", "mp "
            ]
            
            if any(indicator in warehouse_lower for indicator in marketplace_indicators):
                return True
            
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã)
            if re.match(r'^[–ê-–Ø–∞-—è]', warehouse_name):
                return True
            
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        print("\n   üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        
        for category_name, warehouses in warehouse_categories.items():
            print(f"\n      {category_name.upper()}: {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
            
            filtered_in = []
            filtered_out = []
            
            for warehouse in warehouses:
                if is_real_warehouse_emulated(warehouse):
                    filtered_in.append(warehouse)
                else:
                    filtered_out.append(warehouse)
            
            print(f"         ‚úÖ –ë—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã: {len(filtered_in)}")
            if filtered_in and len(filtered_in) <= 5:
                for wh in filtered_in:
                    print(f"            - {wh}")
            
            print(f"         ‚ùå –ë—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã: {len(filtered_out)}")
            if filtered_out:
                for wh in filtered_out[:3]:
                    print(f"            - {wh}")
                if len(filtered_out) > 3:
                    print(f"            ... –∏ –µ—â—ë {len(filtered_out) - 3}")
    
    def compare_orders_logic(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤."""
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        orders_by_article = defaultdict(lambda: {'warehouses': defaultdict(int), 'total': 0})
        
        for row in self.wb_data:
            seller_article = row.get('–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞', '').strip()
            warehouse = row.get('–°–∫–ª–∞–¥', '').strip()
            orders_str = row.get('–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç', '').strip()
            
            try:
                orders = int(orders_str) if orders_str and orders_str.isdigit() else 0
            except (ValueError, AttributeError):
                orders = 0
            
            if orders > 0 and seller_article:
                orders_by_article[seller_article]['warehouses'][warehouse] += orders
                orders_by_article[seller_article]['total'] += orders
        
        print(f"\n   üì¶ –ê—Ä—Ç–∏–∫—É–ª–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏: {len(orders_by_article)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        print("\n   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º:")
        discrepancies = []
        
        for article, data in orders_by_article.items():
            warehouse_sum = sum(data['warehouses'].values())
            total = data['total']
            
            if warehouse_sum != total:
                discrepancies.append({
                    'article': article,
                    'total': total,
                    'warehouse_sum': warehouse_sum,
                    'diff': abs(total - warehouse_sum)
                })
        
        if discrepancies:
            print(f"      ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(discrepancies)} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:")
            for disc in discrepancies[:5]:
                print(f"         - {disc['article']}: –∏—Ç–æ–≥–æ={disc['total']}, —Å—É–º–º–∞={disc['warehouse_sum']}, —Ä–∞–∑–Ω–∏—Ü–∞={disc['diff']}")
        else:
            print(f"      ‚úÖ –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã: —Å—É–º–º–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º = –æ–±—â–µ–º—É –∏—Ç–æ–≥—É")
    
    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        print("\n" + "="*80)
        print("üìÑ –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø–•")
        print("="*80)
        
        report = {
            'summary': {
                'total_products': len(self.products),
                'total_warehouses': len(self.warehouse_names),
                'total_stock': sum(p['total_stock'] for p in self.products.values()),
                'total_orders': sum(p['total_orders'] for p in self.products.values())
            },
            'products': []
        }
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
        for product_key, product_data in self.products.items():
            seller_article = product_data['seller_article']
            wb_article = product_data['wb_article']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
            has_marketplace = any('–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' in wh.lower() or 'marketplace' in wh.lower() 
                                for wh in product_data['warehouses'].keys())
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–ª–∞–¥—ã –ø–æ —Ç–∏–ø–∞–º
            marketplace_warehouses = []
            regular_warehouses = []
            virtual_warehouses = []
            
            for warehouse_name, warehouse_data in product_data['warehouses'].items():
                wh_lower = warehouse_name.lower()
                
                if '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' in wh_lower or 'marketplace' in wh_lower:
                    marketplace_warehouses.append({
                        'name': warehouse_name,
                        'stock': warehouse_data['stock'],
                        'orders': warehouse_data['orders']
                    })
                elif '–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π' in wh_lower:
                    virtual_warehouses.append({
                        'name': warehouse_name,
                        'stock': warehouse_data['stock'],
                        'orders': warehouse_data['orders']
                    })
                else:
                    regular_warehouses.append({
                        'name': warehouse_name,
                        'stock': warehouse_data['stock'],
                        'orders': warehouse_data['orders']
                    })
            
            product_report = {
                'seller_article': seller_article,
                'wb_article': wb_article,
                'total_stock': product_data['total_stock'],
                'total_orders': product_data['total_orders'],
                'total_warehouses': len(product_data['warehouses']),
                'has_marketplace': has_marketplace,
                'marketplace_warehouses': marketplace_warehouses,
                'regular_warehouses_count': len(regular_warehouses),
                'virtual_warehouses_count': len(virtual_warehouses)
            }
            
            report['products'].append(product_report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        report_path = Path('wb_discrepancy_analysis_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
        
        # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        print("\nüîë –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
        
        products_with_marketplace = sum(1 for p in report['products'] if p['has_marketplace'])
        print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–æ–º –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {products_with_marketplace} –∏–∑ {len(report['products'])}")
        
        marketplace_stock_total = sum(
            sum(wh['stock'] for wh in p['marketplace_warehouses'])
            for p in report['products']
        )
        print(f"   ‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_stock_total}")
        
        marketplace_orders_total = sum(
            sum(wh['orders'] for wh in p['marketplace_warehouses'])
            for p in report['products']
        )
        print(f"   ‚Ä¢ –ó–∞–∫–∞–∑—ã —Å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_orders_total}")
        
        return report
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
        print("\n" + "üî¨" * 40)
        print("–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô WB STOCK TRACKER")
        print("üî¨" * 40 + "\n")
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_csv_data()
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
        warehouse_categories = self.analyze_warehouse_names()
        
        # 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
        self.group_by_product()
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
        marketplace_products = self.analyze_marketplace_impact()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.check_warehouse_filtering_logic(warehouse_categories)
        
        # 6. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤
        self.compare_orders_logic()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_detailed_report()
        
        print("\n" + "="*80)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("="*80 + "\n")
        
        return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    csv_path = r"c:\Users\miros\Downloads\Stock Tracker\Stock-Tracker\26-10-2025 –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å 20-10-2025 –ø–æ 26-10-2025_export.csv"
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = WBDiscrepancyAnalyzer(csv_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    report = analyzer.run_full_analysis()
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–∫–ª–∞–¥ '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ calculator.py")
    print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ WB API –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É")
    print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
    print("   4. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ API")
    

if __name__ == "__main__":
    main()
