#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º Stock Tracker.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å WB –¥–∞–Ω–Ω—ã–º–∏.
"""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent / "src"))

from stock_tracker.core.calculator import (
    is_real_warehouse, 
    WildberriesCalculator,
)
from stock_tracker.utils.warehouse_mapper import (
    validate_warehouse_mapping,
    normalize_warehouse_name,
    is_marketplace_warehouse
)
from stock_tracker.utils.logger import setup_logging, get_logger

logger = get_logger(__name__)

async def diagnose_marketplace_warehouse_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–ª–∞–¥–æ–º –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å."""
    logger.info("üîç DIAGNOSING: Marketplace warehouse inclusion")
    
    print("üè≠ Testing Marketplace warehouse detection:")
    
    test_cases = [
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", 
        "Marketplace",
        "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "–ú–ü-1",
        "FBS —Å–∫–ª–∞–¥"
    ]
    
    for warehouse_name in test_cases:
        is_included = is_real_warehouse(warehouse_name)
        is_mp = is_marketplace_warehouse(warehouse_name)
        status = "‚úÖ INCLUDED" if is_included else "‚ùå EXCLUDED"
        mp_status = "üè™ MARKETPLACE" if is_mp else "üè¢ REGULAR"
        print(f"   {status} {mp_status}: '{warehouse_name}'")
    
    # Test FBS detection with warehouse type
    print("\nüì¶ Testing FBS warehouse detection with warehouseType:")
    fbs_test_cases = [
        ("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞"),
        ("–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞"),
        ("–ß–µ—Ö–æ–≤ 1", "–°–∫–ª–∞–¥ WB"),
        ("–ü–æ–¥–æ–ª—å—Å–∫", "–°–∫–ª–∞–¥ WB"),
        ("–ú–ü", "")
    ]
    
    for warehouse_name, warehouse_type in fbs_test_cases:
        is_fbs = WildberriesCalculator.is_fbs_warehouse(warehouse_name, warehouse_type)
        status = "‚úÖ FBS" if is_fbs else "‚ùå NOT FBS"
        print(f"   {status}: '{warehouse_name}' (type: '{warehouse_type}')")

async def diagnose_orders_accuracy_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤."""
    logger.info("üîç DIAGNOSING: Orders counting accuracy")
    
    print("üìä Testing orders accuracy calculation:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    test_nm_id = 12345678
    test_warehouse = "–ß–µ—Ö–æ–≤ 1"
    
    mock_orders = [
        {"nmId": test_nm_id, "warehouseName": "–ß–µ—Ö–æ–≤ 1", "isCancel": False, "supplierArticle": "TEST1"},
        {"nmId": test_nm_id, "warehouseName": "–ß–µ—Ö–æ–≤ 1", "isCancel": False, "supplierArticle": "TEST1"},
        {"nmId": test_nm_id, "warehouseName": "–ß–µ—Ö–æ–≤ 1", "isCancel": True, "supplierArticle": "TEST1"},  # –û—Ç–º–µ–Ω–µ–Ω
        {"nmId": test_nm_id, "warehouseName": "–ü–æ–¥–æ–ª—å—Å–∫", "isCancel": False, "supplierArticle": "TEST1"},
        {"nmId": test_nm_id, "warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "isCancel": False, "supplierArticle": "TEST1", "warehouseType": "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞"},
        {"nmId": 87654321, "warehouseName": "–ß–µ—Ö–æ–≤ 1", "isCancel": False, "supplierArticle": "TEST2"}  # –î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä
    ]
    
    # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
    warehouse_orders = WildberriesCalculator.calculate_warehouse_orders(
        mock_orders, test_nm_id, test_warehouse
    )
    
    print(f"   üì¶ Warehouse orders for nmId {test_nm_id}, warehouse '{test_warehouse}': {warehouse_orders}")
    print(f"   Expected: 2 orders (excluding canceled)")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    calculated_breakdown = {
        "–ß–µ—Ö–æ–≤ 1": 2,
        "–ü–æ–¥–æ–ª—å—Å–∫": 1,
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å": 1
    }
    
    validation = WildberriesCalculator.validate_warehouse_orders_accuracy(
        mock_orders, test_nm_id, calculated_breakdown
    )
    
    print(f"   üéØ Validation result:")
    print(f"      Total actual: {validation['total_actual']}")
    print(f"      Total calculated: {validation['total_calculated']}")
    print(f"      Accuracy: {validation['accuracy_percent']:.1f}%")
    print(f"      Is accurate: {'‚úÖ' if validation['is_accurate'] else '‚ùå'}")

async def diagnose_warehouse_name_mapping():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤."""
    logger.info("üîç DIAGNOSING: Warehouse name mapping")
    
    print("üó∫Ô∏è Testing warehouse name normalization:")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    test_mappings = [
        "–°–∞–º–∞—Ä–∞ (–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ)",
        "–ß–µ—Ö–æ–≤ 1",
        "–ß–µ—Ö–æ–≤-1", 
        "–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ",
        "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "–ü–æ–¥–æ–ª—å—Å–∫ 3"
    ]
    
    for warehouse_name in test_mappings:
        normalized = normalize_warehouse_name(warehouse_name)
        is_mp = is_marketplace_warehouse(warehouse_name)
        mp_indicator = " üè™" if is_mp else ""
        print(f"   '{warehouse_name}' -> '{normalized}'{mp_indicator}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print("\nüîç Testing WB vs Stock Tracker mapping:")
    wb_names = ["–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ", "–ß–µ—Ö–æ–≤", "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"]
    st_names = ["–°–∞–º–∞—Ä–∞ (–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ)", "–ß–µ—Ö–æ–≤ 1", "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞"]
    
    validation = validate_warehouse_mapping(wb_names, st_names)
    
    print(f"   Mapping validation results:")
    print(f"      Accuracy: {validation['accuracy_percent']:.1f}%")
    print(f"      Matched warehouses: {validation['matched_warehouses']}")
    print(f"      WB only: {validation['wb_only_warehouses']}")
    print(f"      ST only: {validation['st_only_warehouses']}")

async def diagnose_fbs_warehouse_inclusion():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è FBS —Å–∫–ª–∞–¥–æ–≤."""
    logger.info("üîç DIAGNOSING: FBS warehouse inclusion")
    
    print("üè™ Testing FBS warehouse data processing:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å FBS —Å–∫–ª–∞–¥–∞–º–∏
    mock_warehouse_data = [
        {
            "nmId": 12345,
            "vendorCode": "TEST-FBS",
            "warehouses": [
                {"warehouseName": "–ß–µ—Ö–æ–≤ 1", "quantity": 100},
                {"warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "quantity": 50},
                {"warehouseName": "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "quantity": 25}
            ]
        }
    ]
    
    mock_orders_data = [
        {"nmId": 12345, "supplierArticle": "TEST-FBS", "warehouseName": "–ß–µ—Ö–æ–≤ 1", "warehouseType": "–°–∫–ª–∞–¥ WB", "isCancel": False},
        {"nmId": 12345, "supplierArticle": "TEST-FBS", "warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "warehouseType": "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "isCancel": False},
        {"nmId": 12345, "supplierArticle": "TEST-FBS", "warehouseName": "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "warehouseType": "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "isCancel": False}
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    grouped_data = WildberriesCalculator.group_data_by_product(
        mock_warehouse_data, mock_orders_data
    )
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for product_key, product_data in grouped_data.items():
        print(f"   üì¶ Product: {product_key}")
        print(f"      Total stock: {product_data['total_stock']}")
        print(f"      Total orders: {product_data['total_orders']}")
        
        fbs_count = 0
        wb_count = 0
        
        for warehouse_name, warehouse_info in product_data["warehouses"].items():
            is_fbs = warehouse_info.get("is_fbs", False)
            stock = warehouse_info.get("stock", 0)
            orders = warehouse_info.get("orders", 0)
            
            if is_fbs:
                fbs_count += 1
                indicator = "üè™ FBS"
            else:
                wb_count += 1
                indicator = "üè¢ WB"
            
            print(f"         {indicator} {warehouse_name}: stock={stock}, orders={orders}")
        
        print(f"      Summary: {fbs_count} FBS warehouses, {wb_count} WB warehouses")
        
        if fbs_count > 0:
            print(f"      ‚úÖ FBS warehouses successfully included!")
        else:
            print(f"      ‚ùå NO FBS warehouses found - CRITICAL ERROR!")

async def run_critical_accuracy_test():
    """–¢–µ—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–º —Å–ª—É—á–∞–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    logger.info("üîç DIAGNOSING: Critical accuracy test case")
    
    print("üéØ Testing specific critical case: Its1_2_3/50g at –ß–µ—Ö–æ–≤ 1:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    # WB –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: 5 –∑–∞–∫–∞–∑–æ–≤
    # Stock Tracker –ø–æ–∫–∞–∑—ã–≤–∞–ª: 49 –∑–∞–∫–∞–∑–æ–≤ (–û–®–ò–ë–ö–ê)
    
    mock_nm_id = 999999  # –°–∏–º—É–ª—è—Ü–∏—è Its1_2_3/50g
    target_warehouse = "–ß–µ—Ö–æ–≤ 1"
    expected_orders = 5
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    correct_orders = []
    for i in range(expected_orders):
        correct_orders.append({
            "nmId": mock_nm_id,
            "supplierArticle": "Its1_2_3/50g",
            "warehouseName": target_warehouse,
            "warehouseType": "–°–∫–ª–∞–¥ WB",
            "isCancel": False,
            "date": f"2025-10-{20+i}"
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    for i in range(3):
        correct_orders.append({
            "nmId": mock_nm_id,
            "supplierArticle": "Its1_2_3/50g", 
            "warehouseName": target_warehouse,
            "warehouseType": "–°–∫–ª–∞–¥ WB",
            "isCancel": True,  # –û–¢–ú–ï–ù–ï–ù - –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç–∞—Ç—å—Å—è
            "date": f"2025-10-{15+i}"
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∫–ª–∞–¥–æ–≤
    other_warehouses = ["–ü–æ–¥–æ–ª—å—Å–∫", "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"]
    for warehouse in other_warehouses:
        warehouse_type = "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞" if warehouse == "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" else "–°–∫–ª–∞–¥ WB"
        for i in range(2):
            correct_orders.append({
                "nmId": mock_nm_id,
                "supplierArticle": "Its1_2_3/50g",
                "warehouseName": warehouse,
                "warehouseType": warehouse_type,
                "isCancel": False,
                "date": f"2025-10-{23+i}"
            })
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    calculated_orders = WildberriesCalculator.calculate_warehouse_orders(
        correct_orders, mock_nm_id, target_warehouse
    )
    
    print(f"   üìä Test results for warehouse '{target_warehouse}':")
    print(f"      Expected orders: {expected_orders}")
    print(f"      Calculated orders: {calculated_orders}")
    print(f"      Result: {'‚úÖ ACCURATE' if calculated_orders == expected_orders else '‚ùå INACCURATE'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
    warehouse_breakdown = {}
    for warehouse in [target_warehouse] + other_warehouses:
        warehouse_breakdown[warehouse] = WildberriesCalculator.calculate_warehouse_orders(
            correct_orders, mock_nm_id, warehouse
        )
    
    validation = WildberriesCalculator.validate_warehouse_orders_accuracy(
        correct_orders, mock_nm_id, warehouse_breakdown
    )
    
    print(f"   üéØ Overall validation:")
    print(f"      Total accuracy: {validation['accuracy_percent']:.1f}%")
    print(f"      Warehouse breakdown: {validation['warehouse_breakdown']}")
    print(f"      Status: {'‚úÖ PASSED' if validation['is_accurate'] else '‚ùå FAILED'}")

async def test_complete_workflow():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.info("üîç TESTING: Complete fixed workflow")
    
    print("üîÑ Testing complete data processing workflow:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_warehouse_data = [
        {
            "nmId": 11111,
            "vendorCode": "CRITICAL-TEST-1",
            "warehouses": [
                {"warehouseName": "–°–∞–º–∞—Ä–∞ (–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ)", "quantity": 100},
                {"warehouseName": "–ß–µ—Ö–æ–≤ 1", "quantity": 200},
                {"warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "quantity": 50}
            ]
        }
    ]
    
    test_orders_data = [
        # –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        {"nmId": 11111, "supplierArticle": "CRITICAL-TEST-1", "warehouseName": "–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ", "warehouseType": "–°–∫–ª–∞–¥ WB", "isCancel": False},
        {"nmId": 11111, "supplierArticle": "CRITICAL-TEST-1", "warehouseName": "–ß–µ—Ö–æ–≤ 1", "warehouseType": "–°–∫–ª–∞–¥ WB", "isCancel": False},
        {"nmId": 11111, "supplierArticle": "CRITICAL-TEST-1", "warehouseName": "–ß–µ—Ö–æ–≤ 1", "warehouseType": "–°–∫–ª–∞–¥ WB", "isCancel": False},
        # FBS –∑–∞–∫–∞–∑—ã
        {"nmId": 11111, "supplierArticle": "CRITICAL-TEST-1", "warehouseName": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "warehouseType": "–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞", "isCancel": False},
        # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        {"nmId": 11111, "supplierArticle": "CRITICAL-TEST-1", "warehouseName": "–ß–µ—Ö–æ–≤ 1", "warehouseType": "–°–∫–ª–∞–¥ WB", "isCancel": True}
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º
    grouped_data = WildberriesCalculator.group_data_by_product(
        test_warehouse_data, test_orders_data
    )
    
    products = WildberriesCalculator.create_products_from_grouped_data(grouped_data)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for product in products:
        print(f"   üì¶ Product: {product.seller_article} (nmId: {product.wildberries_article})")
        print(f"      Total stock: {product.total_stock}")
        print(f"      Total orders: {product.total_orders}")
        print(f"      Turnover: {product.turnover:.3f}")
        
        marketplace_found = False
        normalization_working = False
        
        for warehouse in product.warehouses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π
            if "–Ω–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ" in warehouse.name.lower():
                normalization_working = True
                print(f"         ‚úÖ Normalization: '{warehouse.name}' detected")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
            if "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" in warehouse.name.lower():
                marketplace_found = True
                print(f"         ‚úÖ Marketplace: '{warehouse.name}' included (stock: {warehouse.stock}, orders: {warehouse.orders})")
            else:
                print(f"         üè¢ Regular: '{warehouse.name}' (stock: {warehouse.stock}, orders: {warehouse.orders})")
        
        print(f"      üìä Critical checks:")
        print(f"         Marketplace included: {'‚úÖ' if marketplace_found else '‚ùå'}")
        print(f"         Name normalization: {'‚úÖ' if normalization_working else '‚ùå'}")
        print(f"         Total stock > 0: {'‚úÖ' if product.total_stock > 0 else '‚ùå'}")
        print(f"         Total orders > 0: {'‚úÖ' if product.total_orders > 0 else '‚ùå'}")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."""
    setup_logging()
    
    print("üö® CRITICAL ISSUES DIAGNOSIS - STOCK TRACKER")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:")
    print("1. –ü–æ–ª–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'")
    print("2. –û—à–∏–±–∫–∏ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º")  
    print("3. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤")
    print("4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç FBS —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 60)
    
    try:
        print("\nüîç PHASE 1: Marketplace warehouse detection")
        await diagnose_marketplace_warehouse_issue()
        
        print("\nüîç PHASE 2: Orders accuracy validation")
        await diagnose_orders_accuracy_issue()
        
        print("\nüîç PHASE 3: Warehouse name mapping")
        await diagnose_warehouse_name_mapping()
        
        print("\nüîç PHASE 4: FBS warehouse inclusion")
        await diagnose_fbs_warehouse_inclusion()
        
        print("\nüîç PHASE 5: Critical accuracy test case")
        await run_critical_accuracy_test()
        
        print("\nüîç PHASE 6: Complete workflow test")
        await test_complete_workflow()
        
        print("\n" + "=" * 60)
        print("‚úÖ ALL DIAGNOSTIC PHASES COMPLETED")
        print("üìã Review results above to verify all critical fixes are working")
        print("üéØ Expected outcomes:")
        print("   - Marketplace warehouses are included ‚úÖ")
        print("   - Orders accuracy is 100% ‚úÖ") 
        print("   - Warehouse names are normalized ‚úÖ")
        print("   - FBS warehouses are processed ‚úÖ")
        print("=" * 60)
        
    except Exception as e:
        logger.error(f"Diagnostic failed: {e}")
        print(f"\n‚ùå DIAGNOSTIC ERROR: {e}")
        print("üîß Please check the implementation and try again")

if __name__ == "__main__":
    asyncio.run(main())