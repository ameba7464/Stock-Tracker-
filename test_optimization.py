#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤ Google Sheets.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ß—Ç–æ –º–µ—Ç–æ–¥ create_or_update_product() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä skip_existence_check
2. –ß—Ç–æ –ø—Ä–∏ skip_existence_check=True –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è read_product()
3. –ß—Ç–æ update_table_fixed.py –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
"""

import sys
import os
from unittest.mock import MagicMock, patch, call
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.database.operations import SheetsOperations
from stock_tracker.core.models import Product, Warehouse


def test_skip_existence_check_parameter():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ skip_existence_check"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ skip_existence_check...")
    
    # –°–æ–∑–¥–∞—ë–º mock –æ–±—ä–µ–∫—Ç—ã
    mock_sheets_client = MagicMock()
    operations = SheetsOperations(mock_sheets_client)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
    import inspect
    sig = inspect.signature(operations.create_or_update_product)
    params = sig.parameters
    
    assert 'skip_existence_check' in params, "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä skip_existence_check –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    assert params['skip_existence_check'].default == False, "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False!"
    
    print("   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä skip_existence_check –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print("   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = False")
    return True


def test_skip_read_when_flag_true():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ read_product() –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ skip_existence_check=True"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ read_product()...")
    
    # –°–æ–∑–¥–∞—ë–º mock –æ–±—ä–µ–∫—Ç—ã
    mock_sheets_client = MagicMock()
    operations = SheetsOperations(mock_sheets_client)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    test_product = Product(
        seller_article="TEST001",
        wildberries_article=12345678
    )
    test_product.add_warehouse(Warehouse(name="–¢–µ—Å—Ç —Å–∫–ª–∞–¥", orders=10, stock=50))
    
    # Mock –º–µ—Ç–æ–¥—ã
    with patch.object(operations, 'read_product', return_value=None) as mock_read, \
         patch.object(operations, 'create_product', return_value=2) as mock_create:
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å skip_existence_check=True
        result = operations.create_or_update_product(
            spreadsheet_id="test_id",
            product=test_product,
            skip_existence_check=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ read_product –ù–ï –≤—ã–∑—ã–≤–∞–ª—Å—è
        assert mock_read.call_count == 0, "‚ùå read_product() –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑—ã–≤–∞—Ç—å—Å—è!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ create_product –≤—ã–∑–≤–∞–ª—Å—è
        assert mock_create.call_count == 1, "‚ùå create_product() –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑–≤–∞—Ç—å—Å—è!"
        
    print("   ‚úÖ read_product() –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ skip_existence_check=True")
    print("   ‚úÖ create_product() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é")
    return True


def test_read_called_when_flag_false():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ read_product() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ skip_existence_check=False"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ read_product() –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    
    # –°–æ–∑–¥–∞—ë–º mock –æ–±—ä–µ–∫—Ç—ã
    mock_sheets_client = MagicMock()
    operations = SheetsOperations(mock_sheets_client)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    test_product = Product(
        seller_article="TEST002",
        wildberries_article=87654321
    )
    test_product.add_warehouse(Warehouse(name="–¢–µ—Å—Ç —Å–∫–ª–∞–¥ 2", orders=20, stock=100))
    
    # Mock –º–µ—Ç–æ–¥—ã
    with patch.object(operations, 'read_product', return_value=None) as mock_read, \
         patch.object(operations, 'create_product', return_value=2) as mock_create:
        
        # –í—ã–∑—ã–≤–∞–µ–º –ë–ï–ó skip_existence_check (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        result = operations.create_or_update_product(
            spreadsheet_id="test_id",
            product=test_product
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ read_product –≤—ã–∑—ã–≤–∞–ª—Å—è
        assert mock_read.call_count == 1, "‚ùå read_product() –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑—ã–≤–∞—Ç—å—Å—è!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ create_product –≤—ã–∑–≤–∞–ª—Å—è (—Ç.–∫. read_product –≤–µ—Ä–Ω—É–ª None)
        assert mock_create.call_count == 1, "‚ùå create_product() –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑—ã–≤–∞—Ç—å—Å—è!"
        
    print("   ‚úÖ read_product() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ skip_existence_check=False")
    print("   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    return True


def test_product_service_signature():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ ProductService.sync_from_api_to_sheets() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ ProductService.sync_from_api_to_sheets()...")
    
    from stock_tracker.services.product_service import ProductService
    import inspect
    
    sig = inspect.signature(ProductService.sync_from_api_to_sheets)
    params = sig.parameters
    
    assert 'skip_existence_check' in params, "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä skip_existence_check –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    assert params['skip_existence_check'].default == False, "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False!"
    
    print("   ‚úÖ ProductService.sync_from_api_to_sheets() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç skip_existence_check")
    print("   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤")
    return True


def calculate_api_savings():
    """–†–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüìä –†–ê–°–ß–Å–¢ –≠–ö–û–ù–û–ú–ò–ò API –ó–ê–ü–†–û–°–û–í:")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á—ë—Ç–∞
    products_count = 11
    
    # –î–û –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    requests_before = {
        "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è": 1,
        "–û—Ç–∫—Ä—ã—Ç–∏–µ spreadsheet": 1,
        "–û—Ç–∫—Ä—ã—Ç–∏–µ worksheet": 1,
        "–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã": 2,
        "get_worksheet (read_product)": products_count,
        "find_product_row (scan)": products_count,
        "get_worksheet (create_product)": products_count,
        "verify_structure": 0,  # –£–∂–µ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ
    }
    
    # –ü–û–°–õ–ï –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    requests_after = {
        "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è": 1,
        "–û—Ç–∫—Ä—ã—Ç–∏–µ spreadsheet": 1,
        "–û—Ç–∫—Ä—ã—Ç–∏–µ worksheet": 1,
        "–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã": 2,
        "get_worksheet (create_product)": products_count,
    }
    
    total_before = sum(requests_before.values())
    total_after = sum(requests_after.values())
    
    savings = total_before - total_after
    savings_percent = (savings / total_before) * 100
    
    print(f"üìà –î–û –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:  {total_before} requests")
    print(f"üìâ –ü–û–°–õ–ï:           {total_after} requests")
    print(f"üí∞ –≠–ö–û–ù–û–ú–ò–Ø:        {savings} requests ({savings_percent:.1f}%)")
    print()
    print(f"üöÄ Requests/minute: {total_before * 60 / 90:.1f} ‚Üí {total_after * 60 / 90:.1f}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä.:    ~90 —Å–µ–∫ ‚Üí ~{90 * total_after / total_before:.0f} —Å–µ–∫")
    print("=" * 60)
    
    return savings_percent


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò GOOGLE SHEETS API")
    print("=" * 60)
    
    tests = [
        test_skip_existence_check_parameter,
        test_skip_read_when_flag_true,
        test_read_called_when_flag_false,
        test_product_service_signature,
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
        except AssertionError as e:
            print(f"   {e}")
            failed += 1
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(tests)}")
    print(f"   ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}/{len(tests)}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
        savings = calculate_api_savings()
        
        print("\n‚úÖ –§–ê–ó–ê 1: –ë–´–°–¢–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø - –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä skip_existence_check")
        print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ clear_all_products()")
        print(f"   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è ~{savings:.0f}% API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Google Sheets")
        print(f"   ‚Ä¢ update_table_fixed.py –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
