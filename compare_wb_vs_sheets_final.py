#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Wildberries CSV vs Google Sheets (–ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è Dual API)
"""

import csv
from collections import defaultdict
import re

def parse_number(value):
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç—ã–º–∏"""
    if not value:
        return 0
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    cleaned = str(value).replace(' ', '').replace(',', '.')
    try:
        return int(float(cleaned))
    except:
        return 0

def normalize_warehouse_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞"""
    if not name:
        return ""
    name = name.strip()
    # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å -> Fulllog FBS
    if "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" in name.lower():
        return "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å/FBS"
    # –û–±—É—Ö–æ–≤–æ -> –û–±—É—Ö–æ–≤–æ –ú–ü
    if "–æ–±—É—Ö–æ–≤–æ" in name.lower():
        return "–û–±—É—Ö–æ–≤–æ –ú–ü"
    return name

def load_wb_data(csv_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV Wildberries"""
    products = defaultdict(lambda: {
        'total_stock': 0,
        'total_orders': 0,
        'warehouses': {}
    })
    
    with open(csv_path, 'r', encoding='utf-8-sig') as f:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        next(f)
        
        reader = csv.DictReader(f)
        
        for row in reader:
            seller_article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'].strip()
            if not seller_article:
                continue
            
            warehouse = normalize_warehouse_name(row['–°–∫–ª–∞–¥'])
            stock = parse_number(row['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —à—Ç'])
            orders = parse_number(row['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'])
            
            # –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏ –∑–∞–∫–∞–∑—ã
            products[seller_article]['total_stock'] += stock
            products[seller_article]['total_orders'] += orders
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º
            if warehouse:
                if warehouse not in products[seller_article]['warehouses']:
                    products[seller_article]['warehouses'][warehouse] = {
                        'stock': 0,
                        'orders': 0
                    }
                products[seller_article]['warehouses'][warehouse]['stock'] += stock
                products[seller_article]['warehouses'][warehouse]['orders'] += orders
    
    return products

def load_sheets_data(csv_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets CSV"""
    products = {}
    
    with open(csv_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        
        for row in reader:
            seller_article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'].strip()
            if not seller_article:
                continue
            
            total_stock = parse_number(row['–û—Å—Ç–∞—Ç–∫–∏ (–≤—Å–µ–≥–æ)'])
            total_orders = parse_number(row['–ó–∞–∫–∞–∑—ã (–≤—Å–µ–≥–æ)'])
            
            # –ü–∞—Ä—Å–∏–º —Å–∫–ª–∞–¥—ã (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —è—á–µ–π–∫–∏)
            warehouse_names = row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞'].split('\n')
            warehouse_stocks = row['–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ'].split('\n')
            warehouse_orders = row['–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞'].split('\n')
            
            warehouses = {}
            for i in range(len(warehouse_names)):
                wh_name = warehouse_names[i].strip() if i < len(warehouse_names) else ""
                wh_stock = parse_number(warehouse_stocks[i]) if i < len(warehouse_stocks) else 0
                wh_orders = parse_number(warehouse_orders[i]) if i < len(warehouse_orders) else 0
                
                if wh_name:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    normalized_name = normalize_warehouse_name(wh_name)
                    warehouses[normalized_name] = {
                        'stock': wh_stock,
                        'orders': wh_orders
                    }
            
            products[seller_article] = {
                'total_stock': total_stock,
                'total_orders': total_orders,
                'warehouses': warehouses
            }
    
    return products

def compare_data(wb_data, sheets_data):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ WB –∏ Sheets"""
    
    print("\n" + "="*100)
    print("üìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: WILDBERRIES CSV vs GOOGLE SHEETS (–ø–æ—Å–ª–µ Dual API)")
    print("="*100 + "\n")
    
    # –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã
    all_articles = sorted(set(list(wb_data.keys()) + list(sheets_data.keys())))
    
    total_discrepancies = 0
    perfect_matches = 0
    
    for article in all_articles:
        wb = wb_data.get(article, {'total_stock': 0, 'total_orders': 0, 'warehouses': {}})
        sheets = sheets_data.get(article, {'total_stock': 0, 'total_orders': 0, 'warehouses': {}})
        
        wb_stock = wb['total_stock']
        sheets_stock = sheets['total_stock']
        stock_diff = sheets_stock - wb_stock
        
        wb_orders = wb['total_orders']
        sheets_orders = sheets['total_orders']
        orders_diff = sheets_orders - wb_orders
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if stock_diff == 0 and orders_diff == 0:
            status = "‚úÖ –ò–î–ï–ê–õ–¨–ù–û"
            perfect_matches += 1
        elif abs(stock_diff) <= 10:
            status = "‚ö†Ô∏è –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï"
        else:
            status = "‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï"
            total_discrepancies += 1
        
        print(f"{status} {article}")
        print(f"  –û—Å—Ç–∞—Ç–∫–∏:")
        print(f"    WB:     {wb_stock:>6} —à—Ç")
        print(f"    Sheets: {sheets_stock:>6} —à—Ç")
        if stock_diff != 0:
            sign = "+" if stock_diff > 0 else ""
            percent = (stock_diff / wb_stock * 100) if wb_stock > 0 else 0
            print(f"    –†–∞–∑–Ω–∏—Ü–∞: {sign}{stock_diff:>5} —à—Ç ({sign}{percent:>.1f}%)")
        
        print(f"  –ó–∞–∫–∞–∑—ã:")
        print(f"    WB:     {wb_orders:>6} —à—Ç")
        print(f"    Sheets: {sheets_orders:>6} —à—Ç")
        if orders_diff != 0:
            sign = "+" if orders_diff > 0 else ""
            print(f"    –†–∞–∑–Ω–∏—Ü–∞: {sign}{orders_diff:>5} —à—Ç")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏)
        if stock_diff != 0 or orders_diff != 0:
            print(f"  –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º:")
            
            all_warehouses = sorted(set(list(wb['warehouses'].keys()) + list(sheets['warehouses'].keys())))
            
            for wh in all_warehouses:
                wb_wh = wb['warehouses'].get(wh, {'stock': 0, 'orders': 0})
                sheets_wh = sheets['warehouses'].get(wh, {'stock': 0, 'orders': 0})
                
                wh_stock_diff = sheets_wh['stock'] - wb_wh['stock']
                
                if wh_stock_diff != 0 or wb_wh['stock'] > 0 or sheets_wh['stock'] > 0:
                    diff_marker = ""
                    if wh_stock_diff != 0:
                        diff_marker = f" ({'+' if wh_stock_diff > 0 else ''}{wh_stock_diff})"
                    
                    print(f"    {wh:30s}: WB={wb_wh['stock']:>4}, Sheets={sheets_wh['stock']:>4}{diff_marker}")
        
        print()
    
    print("="*100)
    print(f"üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(all_articles)}")
    print(f"  ‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {perfect_matches}")
    print(f"  ‚ùå –° —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏: {total_discrepancies}")
    print(f"  üìä –¢–æ—á–Ω–æ—Å—Ç—å: {(perfect_matches / len(all_articles) * 100):.1f}%")
    print("="*100 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫–ª–∞–¥–æ–≤ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å/FBS
    print("="*100)
    print("üè™ –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø FBS –°–ö–õ–ê–î–û–í –í SHEETS:")
    print("="*100 + "\n")
    
    for article in all_articles:
        sheets = sheets_data.get(article, {'warehouses': {}})
        
        fbs_warehouses = [wh for wh in sheets['warehouses'].keys() 
                         if 'fbs' in wh.lower() or '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å' in wh.lower() or 'fulllog' in wh.lower()]
        
        if fbs_warehouses:
            fbs_stock = sum(sheets['warehouses'][wh]['stock'] for wh in fbs_warehouses)
            print(f"‚úÖ {article}: FBS —Å–∫–ª–∞–¥—ã –Ω–∞–π–¥–µ–Ω—ã ({', '.join(fbs_warehouses)}), –æ—Å—Ç–∞—Ç–∫–∏: {fbs_stock} —à—Ç")
        else:
            print(f"‚ùå {article}: FBS —Å–∫–ª–∞–¥—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\n" + "="*100)

if __name__ == "__main__":
    wb_csv = r"c:\Users\miros\Downloads\28-10-2025 –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å 22-10-2025 –ø–æ 28-10-2025_export (1).csv"
    sheets_csv = r"c:\Users\miros\Downloads\Stock Tracker - Stock Tracker (7).csv"
    
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    wb_data = load_wb_data(wb_csv)
    sheets_data = load_sheets_data(sheets_csv)
    
    print(f"‚úÖ WB: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(wb_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    print(f"‚úÖ Sheets: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(sheets_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    compare_data(wb_data, sheets_data)
