#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB —Å —Ç—Ä–µ–∫–µ—Ä–æ–º Stock-Tracker
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets API
–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: 30-10-2025
"""

import sys
import os
from pathlib import Path
import pandas as pd
from collections import defaultdict

# Fix Windows console encoding
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from stock_tracker.utils.config import get_config
from stock_tracker.database.sheets import GoogleSheetsClient

def get_fresh_tracker_data():
    """Get fresh data directly from Google Sheets"""
    config = get_config()
    
    client = GoogleSheetsClient(
        service_account_path=config.google_service_account_key_path,
        sheet_id=config.google_sheet_id,
        sheet_name='Stock Tracker'  # Hardcode correct sheet name
    )
    
    sheet = client.get_spreadsheet()
    worksheet = sheet.worksheet('Stock Tracker')
    
    # Get all data
    data = worksheet.get_all_values()
    
    # Convert to DataFrame
    if len(data) > 1:
        df = pd.DataFrame(data[1:], columns=data[0])
        return df
    else:
        return pd.DataFrame()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
wb_file = r"c:\Users\miros\Downloads\30-10-2025 –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å 24-10-2025 –ø–æ 30-10-2025_export.csv_export (1).tsv"

print("=" * 100)
print("–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WB vs Stock-Tracker (–°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï)")
print("=" * 100)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
wb_df = pd.read_csv(wb_file, sep='\t', encoding='utf-8')
print(f"\n[*] –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets API...")
tracker_df = get_fresh_tracker_data()

print(f"\n[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  - WB —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(wb_df)} —Å—Ç—Ä–æ–∫")
print(f"  - Stock-Tracker (LIVE): {len(tracker_df)} —Å—Ç—Ä–æ–∫")

# Print tracker columns
print(f"\n[i] –ö–æ–ª–æ–Ω–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞: {list(tracker_df.columns)}")

# Print first row
if len(tracker_df) > 0:
    print(f"\n[*] –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞:")
    print(tracker_df.iloc[0].to_dict())

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
# WB –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
wb_grouped = defaultdict(lambda: {
    'nm_id': None,
    'total_orders': 0,
    'total_stock': 0,
    'warehouses': []
})

for _, row in wb_df.iterrows():
    article = row.get('–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '')
    nm_id = row.get('–ê—Ä—Ç–∏–∫—É–ª WB', None)
    warehouse = row.get('–°–∫–ª–∞–¥', '')
    orders = float(row.get('–ó–∞–∫–∞–∑—ã', 0) or 0)
    stock = float(row.get('–û—Å—Ç–∞—Ç–∫–∏', 0) or 0)
    
    if article:
        wb_grouped[article]['nm_id'] = nm_id
        wb_grouped[article]['total_orders'] += orders
        wb_grouped[article]['total_stock'] += stock
        wb_grouped[article]['warehouses'].append({
            'name': warehouse,
            'orders': orders,
            'stock': stock
        })

# Tracker –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
tracker_grouped = {}
for _, row in tracker_df.iterrows():
    article = row.get('–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞', '')
    
    if article:
        # Try to parse numeric values
        try:
            total_stock = int(row.get('–û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏', '0').replace(' ', ''))
        except:
            total_stock = 0
            
        try:
            total_orders = int(row.get('–ó–∞–∫–∞–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é', '0').replace(' ', ''))
        except:
            total_orders = 0
            
        try:
            nm_id = int(row.get('–ê—Ä—Ç–∏–∫—É–ª WB', '0'))
        except:
            nm_id = 0
        
        tracker_grouped[article] = {
            'nm_id': nm_id,
            'total_orders': total_orders,
            'total_stock': total_stock,
            'turnover': row.get('–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å (–¥–Ω–∏)', '0')
        }

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
print("\n" + "="*100)
print("–î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –ê–†–¢–ò–ö–£–õ–ê–ú")
print("="*100)

# Get common articles
wb_articles = set(wb_grouped.keys())
tracker_articles = set(tracker_grouped.keys())
common_articles = wb_articles & tracker_articles

print(f"\nüì¶ –ê—Ä—Ç–∏–∫—É–ª—ã:")
print(f"  - –í WB —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {len(wb_articles)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
print(f"  - –í Stock-Tracker: {len(tracker_articles)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
print(f"  - –û–±—â–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(common_articles)}")
if wb_articles - tracker_articles:
    print(f"  - –¢–æ–ª—å–∫–æ –≤ WB: {wb_articles - tracker_articles}")
if tracker_articles - wb_articles:
    print(f"  - –¢–æ–ª—å–∫–æ –≤ Tracker: {tracker_articles - wb_articles}")

# Compare each common article
total_wb_orders = 0
total_tracker_orders = 0
total_wb_stock = 0
total_tracker_stock = 0

orders_match_count = 0
stock_match_count = 0

for article in sorted(common_articles):
    wb_data = wb_grouped[article]
    tracker_data = tracker_grouped[article]
    
    wb_orders = wb_data['total_orders']
    tracker_orders = tracker_data['total_orders']
    wb_stock = wb_data['total_stock']
    tracker_stock = tracker_data['total_stock']
    
    total_wb_orders += wb_orders
    total_tracker_orders += tracker_orders
    total_wb_stock += wb_stock
    total_tracker_stock += tracker_stock
    
    orders_match = wb_orders == tracker_orders
    stock_match = wb_stock == tracker_stock
    
    if orders_match:
        orders_match_count += 1
    if stock_match:
        stock_match_count += 1
    
    print(f"\n\n{'‚îÅ'*100}")
    print(f"üè∑Ô∏è  –ê–†–¢–ò–ö–£–õ: {article}")
    print(f"{'‚îÅ'*100}")
    
    print(f"\nüìã –ê—Ä—Ç–∏–∫—É–ª WB:")
    print(f"  WB:      {wb_data['nm_id']}")
    print(f"  Tracker: {tracker_data['nm_id']}")
    
    print(f"\nüì¶ –ó–ê–ö–ê–ó–´ (–≤—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ 24-30 –æ–∫—Ç—è–±—Ä—è):")
    print(f"  WB:        {wb_orders} —à—Ç")
    print(f"  Tracker:    {tracker_orders} —à—Ç")
    if orders_match:
        print(f"  ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç")
    else:
        diff = tracker_orders - wb_orders
        diff_pct = (diff / wb_orders * 100) if wb_orders > 0 else 0
        print(f"  ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: {diff:+.1f} —à—Ç ({diff_pct:+.1f}%)")
    
    print(f"\nüìä –û–°–¢–ê–¢–ö–ò (–Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å):")
    print(f"  WB:       {wb_stock} —à—Ç")
    print(f"  Tracker:    {tracker_stock} —à—Ç")
    if stock_match:
        print(f"  ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç")
    else:
        diff = tracker_stock - wb_stock
        diff_pct = (diff / wb_stock * 100) if wb_stock > 0 else 0
        print(f"  ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: {diff:+.1f} —à—Ç ({diff_pct:+.1f}%)")
    
    # Show WB warehouses
    print(f"\nüè≠ –°–ö–õ–ê–î–´ (–¥–∞–Ω–Ω—ã–µ WB):")
    active_warehouses = [w for w in wb_data['warehouses'] if w['orders'] > 0 or w['stock'] > 0]
    if active_warehouses:
        print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(active_warehouses)}")
        for wh in active_warehouses:
            print(f"    ‚Ä¢ {wh['name']:40} | –ó–∞–∫–∞–∑—ã: {wh['orders']:>4} | –û—Å—Ç–∞—Ç–∫–∏: {wh['stock']:>6}")
    
    print(f"\n‚è±Ô∏è  –û–ë–û–†–ê–ß–ò–í–ê–ï–ú–û–°–¢–¨ (Tracker): {tracker_data['turnover']} –¥–Ω–µ–π")

# Summary
print("\n" + "="*100)
print("–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print("="*100)

print(f"\nüìä –ò–¢–û–ì–û –ø–æ –≤—Å–µ–º –∞—Ä—Ç–∏–∫—É–ª–∞–º:")
print(f"\n  –ó–∞–∫–∞–∑—ã:")
print(f"    WB:         {total_wb_orders} —à—Ç")
print(f"    Tracker:      {total_tracker_orders} —à—Ç")
print(f"    –†–∞–∑–Ω–∏—Ü–∞:    {total_tracker_orders - total_wb_orders:+.1f} —à—Ç")

print(f"\n  –û—Å—Ç–∞—Ç–∫–∏:")
print(f"    WB:        {total_wb_stock} —à—Ç")
print(f"    Tracker:     {total_tracker_stock} —à—Ç")
print(f"    –†–∞–∑–Ω–∏—Ü–∞:   {total_tracker_stock - total_wb_stock:+.1f} —à—Ç")

print(f"\nüìà –¢–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:")
print(f"    –ê—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º:  {len(common_articles) - orders_match_count}/{len(common_articles)} ({(len(common_articles) - orders_match_count)/len(common_articles)*100:.1f}%)")
print(f"    –ê—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º: {len(common_articles) - stock_match_count}/{len(common_articles)} ({(len(common_articles) - stock_match_count)/len(common_articles)*100:.1f}%)")

print("\n" + "="*100)
print("–í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
print("="*100)

print(f"\n‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –ú–û–ú–ï–ù–¢–´:")
print(f"   - –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ WB")
print(f"   - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets API")
print(f"   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")

if orders_match_count == len(common_articles) and stock_match_count == len(common_articles):
    print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π WB!")
else:
    print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:")
    print(f"   - –†–∞–∑–ª–∏—á–∏—è –≤ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–∫–∞–∑–æ–≤ (–º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —É—á–µ—Ç–∞)")
    print(f"   - –†–∞–∑–ª–∏—á–∏—è –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö (–º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑-–∑–∞ —É—á–µ—Ç–∞ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤)")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ —Å–∫–ª–∞–¥—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç—Ä–µ–∫–µ—Ä–µ")
    print(f"   2. –£—Ç–æ—á–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —É—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ (WB –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞ 24-30 –æ–∫—Ç—è–±—Ä—è)")
    print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º")
    print(f"   4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

print("\n" + "="*100)
