#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π —Å–∫–ª–∞–¥–æ–≤.
–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from stock_tracker.core.calculator import WildberriesCalculator
from stock_tracker.core.models import Product, Warehouse

def create_test_products_with_real_warehouses():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏."""
    
    print("üè≠ Creating test products with REAL warehouses...")
    
    # –ü—Ä–æ–¥—É–∫—Ç 1: –° —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Warehouse API v1
    product1 = Product(
        wildberries_article=163383328,
        seller_article="ItsSport2/50g"
    )
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏
    warehouses1 = [
        Warehouse(name="–¢—É–ª–∞", stock=434, orders=17),
        Warehouse(name="–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", stock=310, orders=12), 
        Warehouse(name="–î–æ–º–æ–¥–µ–¥–æ–≤–æ", stock=186, orders=7),
        Warehouse(name="–ü–æ–¥–æ–ª—å—Å–∫ (–§–∏–ª–∏–∞–ª)", stock=124, orders=5),
        Warehouse(name="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", stock=99, orders=4),
        Warehouse(name="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", stock=88, orders=5)
    ]
    
    for warehouse in warehouses1:
        product1.add_warehouse(warehouse)
    
    # –ü—Ä–æ–¥—É–∫—Ç 2
    product2 = Product(
        wildberries_article=163383327,
        seller_article="Its2/50g"
    )
    
    warehouses2 = [
        Warehouse(name="–¢—É–ª–∞", stock=215, orders=24),
        Warehouse(name="–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", stock=154, orders=17),
        Warehouse(name="–î–æ–º–æ–¥–µ–¥–æ–≤–æ", stock=92, orders=10),
        Warehouse(name="–ü–æ–¥–æ–ª—å—Å–∫ (–§–∏–ª–∏–∞–ª)", stock=61, orders=7),
        Warehouse(name="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", stock=49, orders=5),
        Warehouse(name="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", stock=45, orders=7)
    ]
    
    for warehouse in warehouses2:
        product2.add_warehouse(warehouse)
    
    # –ü—Ä–æ–¥—É–∫—Ç 3
    product3 = Product(
        wildberries_article=163383326,
        seller_article="Its1_2_3/50g"
    )
    
    warehouses3 = [
        Warehouse(name="–¢—É–ª–∞", stock=208, orders=28),
        Warehouse(name="–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", stock=148, orders=20),
        Warehouse(name="–î–æ–º–æ–¥–µ–¥–æ–≤–æ", stock=89, orders=12),
        Warehouse(name="–ü–æ–¥–æ–ª—å—Å–∫ (–§–∏–ª–∏–∞–ª)", stock=59, orders=8),
        Warehouse(name="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", stock=47, orders=6),
        Warehouse(name="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", stock=44, orders=7)
    ]
    
    for warehouse in warehouses3:
        product3.add_warehouse(warehouse)
    
    products = [product1, product2, product3]
    
    print(f"‚úÖ Created {len(products)} products with REAL warehouse data:")
    for product in products:
        print(f"  üì¶ {product.seller_article}: {len(product.warehouses)} warehouses")
        warehouse_names = [w.name for w in product.warehouses]
        print(f"      Warehouses: {warehouse_names}")
    
    return products

def simulate_google_sheets_update():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets."""
    
    print("\nüìä SIMULATING: Google Sheets Update")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏
    products = create_test_products_with_real_warehouses()
    
    print("\nüìã GOOGLE SHEETS TABLE CONTENT:")
    print("–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞ | –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ | –ó–∞–∫–∞–∑—ã (–≤—Å–µ–≥–æ) | –û—Å—Ç–∞—Ç–∫–∏ (–≤—Å–µ–≥–æ) | –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å | –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ | –ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞ | –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
    print("-" * 150)
    
    for product in products:
        for i, warehouse in enumerate(product.warehouses):
            if i == 0:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                print(f"{product.seller_article:<15} | {product.wildberries_article:<13} | {product.total_orders:<13} | {product.total_stock:<15} | {0.000:<14} | {warehouse.name:<15} | {warehouse.orders:<15} | {warehouse.stock}")
            else:
                # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
                print(f"{'':15} | {'':13} | {'':13} | {'':15} | {'':14} | {warehouse.name:<15} | {warehouse.orders:<15} | {warehouse.stock}")
    
    print("\nüéØ KEY OBSERVATIONS:")
    print("‚úÖ All warehouse names are REAL (–¢—É–ª–∞, –ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã, –î–æ–º–æ–¥–µ–¥–æ–≤–æ, etc.)")
    print("‚ùå NO fake names like '–ö–æ–ª–µ–¥–∏–Ω–æ', '–ü–æ–¥–æ–ª—å—Å–∫', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å'")
    print("üìä Stock and orders are distributed realistically across warehouses")
    
    return True

if __name__ == "__main__":
    print("üîÑ SIMULATING: Google Sheets Update with Real Warehouses")
    print("=" * 70)
    print("Purpose: Show what the table SHOULD look like with correct warehouse data")
    print()
    
    try:
        success = simulate_google_sheets_update()
        if success:
            print("\n‚úÖ SIMULATION COMPLETE")
            print("üìä This is what Google Sheets should contain after proper update")
            print("üéØ Compare with current table - if different, data needs to be refreshed")
        else:
            print("\n‚ùå SIMULATION FAILED")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• Simulation failed with error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)