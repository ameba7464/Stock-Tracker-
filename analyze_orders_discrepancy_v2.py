#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ –º–µ—Ç—Ä–∏–∫–µ "–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞" –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ WB –∏ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ–π
"""

import csv
from collections import defaultdict

# Paths
wb_file = r"c:\Users\miros\Downloads\28-10-2025 –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å 22-10-2025 –ø–æ 28-10-2025_export.csv"
our_file = r"c:\Users\miros\Downloads\Stock Tracker - Stock Tracker (3).csv"

print("="*100)
print("üîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –í –ú–ï–¢–†–ò–ö–ï '–ó–ê–ö–ê–ó–´ –°–û –°–ö–õ–ê–î–ê'")
print("="*100)
print()

# Parse WB data
wb_data = defaultdict(lambda: defaultdict(int))
wb_total_by_article = defaultdict(int)

print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WILDBERRIES...")
with open(wb_file, 'r', encoding='utf-8-sig') as f:
    # Skip first line (it's a title, not headers)
    f.readline()
    reader = csv.DictReader(f)
    for row in reader:
        article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']
        warehouse = row['–°–∫–ª–∞–¥']
        orders_str = row['–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç'].strip()
        
        if orders_str and orders_str.isdigit():
            orders = int(orders_str)
            wb_data[article][warehouse] += orders
            wb_total_by_article[article] += orders

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(wb_data)} –∞—Ä—Ç–∏–∫—É–ª–∞–º")
print()

# Parse our data
our_data = defaultdict(lambda: defaultdict(int))
our_total_by_article = defaultdict(int)

print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ù–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–´...")
with open(our_file, 'r', encoding='utf-8') as f:
    reader = csv.DictReader(f)
    for row in reader:
        article = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']
        
        # Parse warehouses and their orders
        warehouses_str = row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞']
        orders_str = row['–ó–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞']
        
        if not warehouses_str or not orders_str:
            continue
            
        warehouses_list = [w.strip() for w in warehouses_str.split('\n') if w.strip()]
        orders_list = [o.strip() for o in orders_str.split('\n') if o.strip()]
        
        for wh, ord_str in zip(warehouses_list, orders_list):
            if ord_str.isdigit():
                orders = int(ord_str)
                our_data[article][wh] += orders
                our_total_by_article[article] += orders

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(our_data)} –∞—Ä—Ç–∏–∫—É–ª–∞–º")
print()

# Compare data
print("="*100)
print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –ê–†–¢–ò–ö–£–õ–ê–ú:")
print("="*100)
print()

all_articles = sorted(set(wb_data.keys()) | set(our_data.keys()))

total_wb_orders = 0
total_our_orders = 0
critical_errors = []

for article in all_articles:
    wb_total = wb_total_by_article.get(article, 0)
    our_total = our_total_by_article.get(article, 0)
    
    total_wb_orders += wb_total
    total_our_orders += our_total
    
    if wb_total == 0 and our_total == 0:
        continue
    
    diff = our_total - wb_total
    diff_percent = ((our_total - wb_total) / wb_total * 100) if wb_total > 0 else 0
    
    # Status
    if wb_total > 0 and our_total == 0:
        status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û - –ù–ï–¢ –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ï"
        critical_errors.append({
            'article': article,
            'wb': wb_total,
            'ours': our_total,
            'diff': diff,
            'diff_percent': diff_percent,
            'reason': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ'
        })
    elif abs(diff_percent) > 50:
        status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û - –†–ê–°–•–û–ñ–î–ï–ù–ò–ï >50%"
        critical_errors.append({
            'article': article,
            'wb': wb_total,
            'ours': our_total,
            'diff': diff,
            'diff_percent': diff_percent,
            'reason': f'–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {diff_percent:.1f}%'
        })
    elif abs(diff_percent) > 20:
        status = "‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - –†–ê–°–•–û–ñ–î–ï–ù–ò–ï >20%"
    elif abs(diff_percent) > 5:
        status = "‚ö†Ô∏è  –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
    else:
        status = "‚úÖ OK"
    
    print(f"üì¶ {article}")
    print(f"   WB:           {wb_total:4d} –∑–∞–∫–∞–∑–æ–≤")
    print(f"   –¢–∞–±–ª–∏—Ü–∞:      {our_total:4d} –∑–∞–∫–∞–∑–æ–≤")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞:      {diff:+4d} –∑–∞–∫–∞–∑–æ–≤ ({diff_percent:+.1f}%)")
    print(f"   –°—Ç–∞—Ç—É—Å:       {status}")
    
    # Show warehouse details for critical errors
    if "–ö–†–ò–¢–ò–ß–ù–û" in status or "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï" in status:
        all_warehouses = set(wb_data[article].keys()) | set(our_data[article].keys())
        print(f"   –°–∫–ª–∞–¥—ã:")
        for wh in sorted(all_warehouses):
            wb_orders = wb_data[article].get(wh, 0)
            our_orders = our_data[article].get(wh, 0)
            if wb_orders > 0 or our_orders > 0:
                symbol = "‚ùå" if wb_orders != our_orders else "‚úì"
                print(f"      {symbol} {wh:<40} WB: {wb_orders:3d}  –¢–∞–±–ª–∏—Ü–∞: {our_orders:3d}")
    print()

print("="*100)
print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("="*100)
print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ WB:        {total_wb_orders}")
print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ:    {total_our_orders}")
print(f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:                {total_our_orders - total_wb_orders:+d} ({(total_our_orders - total_wb_orders)/total_wb_orders*100:+.1f}%)" if total_wb_orders > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö WB")
print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:         {len(critical_errors)}")
print()

if critical_errors:
    print("="*100)
    print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("="*100)
    for i, err in enumerate(critical_errors, 1):
        print(f"\n{i}. {err['article']}")
        print(f"   WB: {err['wb']} –∑–∞–∫–∞–∑–æ–≤")
        print(f"   –¢–∞–±–ª–∏—Ü–∞: {err['ours']} –∑–∞–∫–∞–∑–æ–≤")
        print(f"   –ü—Ä–æ–±–ª–µ–º–∞: {err['reason']}")

print("\n")
print("="*100)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:")
print("="*100)
print("""
–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:

1Ô∏è‚É£  –ü–ï–†–ò–û–î –î–ê–ù–ù–´–• –ù–ï –°–û–í–ü–ê–î–ê–ï–¢
   WB –≤—ã–≥—Ä—É–∑–∫–∞: 22-28 –æ–∫—Ç—è–±—Ä—è 2025 (7 –¥–Ω–µ–π, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)
   –ù–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞: dateFrom = 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç –º–æ–º–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   
   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ 27 –æ–∫—Ç—è–±—Ä—è, —Ç–æ –ø–µ—Ä–∏–æ–¥ 20-27 –æ–∫—Ç—è–±—Ä—è
                WB –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 22-28, –º—ã —Å—á–∏—Ç–∞–µ–º 20-27 - –†–ê–ó–ù–´–ï –ü–ï–†–ò–û–î–´!

2Ô∏è‚É£  API ENDPOINT –ù–ï –î–û–ö–£–ú–ï–ù–¢–ò–†–û–í–ê–ù –ü–û–õ–ù–û–°–¢–¨–Æ
   –ò—Å–ø–æ–ª—å–∑—É–µ–º: GET /api/v1/supplier/orders?dateFrom=2025-10-20T00:00:00&flag=0
   
   ‚ùì –ù–ï–Ø–°–ù–û:
   - –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç flag=0? (–º–æ–∂–µ—Ç –±—ã—Ç—å flag=1 –¥–∞—ë—Ç –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ)
   - –í–∫–ª—é—á–∞—é—Ç—Å—è –ª–∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã?
   - –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ quantity –≤ –∑–∞–∫–∞–∑–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ count?
   - –ú–æ–≥—É—Ç –ª–∏ –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö?

3Ô∏è‚É£  –õ–û–ì–ò–ö–ê –ü–û–î–°–ß–Å–¢–ê –£–ü–†–û–©–ï–ù–ê
   –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: COUNT(orders WHERE nmId=X AND warehouseName=Y)
   
   ‚ùå –ù–ï –£–ß–ò–¢–´–í–ê–ï–ú:
   - –ü–æ–ª–µ is_cancel (–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
   - –ü–æ–ª–µ quantity (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å >1)
   - –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –∑–∞–∫–∞–∑–∞
   - –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞

4Ô∏è‚É£  –ù–ê–ó–í–ê–ù–ò–Ø –°–ö–õ–ê–î–û–í –ú–û–ì–£–¢ –ù–ï –°–û–í–ü–ê–î–ê–¢–¨
   WB: "–ü–æ–¥–æ–ª—å—Å–∫ 3"
   API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å: "–ü–æ–¥–æ–ª—å—Å–∫-3" –∏–ª–∏ "–ü–æ–¥–æ–ª—å—Å–∫ 3 "
""")

print("\n" + "="*100)
print("üí° –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
print("="*100)
print("""
–®–ê–ì 1: –ò–ó–£–ß–ò–¢–¨ –†–ï–ê–õ–¨–ù–£–Æ –°–¢–†–£–ö–¢–£–†–£ –û–¢–í–ï–¢–ê API
----------------------------------------------
–ù—É–∂–Ω–æ:
- –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç /api/v1/supplier/orders
- –í—ã–≤–µ—Å—Ç–∏ JSON –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã:
  ‚Ä¢ srid, odid, gNumber (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID)
  ‚Ä¢ is_cancel (–æ—Ç–º–µ–Ω—ë–Ω –ª–∏ –∑–∞–∫–∞–∑)
  ‚Ä¢ quantity (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞)
  ‚Ä¢ warehouseName (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞)
  ‚Ä¢ date, lastChangeDate (–¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)

–®–ê–ì 2: –î–û–ë–ê–í–ò–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–£–Æ –§–ò–õ–¨–¢–†–ê–¶–ò–Æ
----------------------------------------------
–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ product_service.py:

```python
# –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
valid_orders = [
    order for order in orders_data 
    if not order.get('is_cancel', False)  # –ò—Å–∫–ª—é—á–∏—Ç—å –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ
]

# –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
unique_orders = {}
for order in valid_orders:
    order_id = order.get('srid') or order.get('odid') or order.get('gNumber')
    if order_id and order_id not in unique_orders:
        unique_orders[order_id] = order

# –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å —É—á—ë—Ç–æ–º quantity
for order_id, order in unique_orders.items():
    nm_id = order.get('nmId')
    wh_name = order.get('warehouseName')
    quantity = order.get('quantity', 1)  # –ú–æ–∂–µ—Ç –±—ã—Ç—å >1!
    
    warehouse_orders[wh_name] = warehouse_orders.get(wh_name, 0) + quantity
```

–®–ê–ì 3: –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–¢–¨ –ü–ï–†–ò–û–î–´
----------------------------------------------
–û–ø—Ü–∏–∏:
A) –•—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
B) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏/–º–µ—Å—è—Ü–∞)
C) –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ config

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–∞—Ä–∏–∞–Ω—Ç B - —Å—á–∏—Ç–∞—Ç—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)

–®–ê–ì 4: –î–û–ë–ê–í–ò–¢–¨ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
----------------------------------------------
```python
logger.info(f"Fetched {len(orders_data)} orders from API")
logger.info(f"After filtering cancelled: {len(valid_orders)} orders")
logger.info(f"After deduplication: {len(unique_orders)} unique orders")
logger.info(f"Total quantity: {sum(o.get('quantity', 1) for o in unique_orders.values())}")
```

–®–ê–ì 5: –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –°–ö–õ–ê–î–û–í
----------------------------------------------
–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
```python
def normalize_warehouse_name(name: str) -> str:
    # –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = name.strip()
    # –ó–∞–º–µ–Ω–∏—Ç—å –¥–µ—Ñ–∏—Å—ã
    name = name.replace('-', ' ')
    # –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤
    return ' '.join(word.capitalize() for word in name.split())
```
""")

print("\n" + "="*100)
print("üéØ –ü–ï–†–í–´–ô –®–ê–ì: –ò–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API")
print("="*100)
print("""
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:

```bash
python debug_supplier_orders_structure.py
```

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–≤–µ–¥–µ—Ç:
- –ü—Ä–∏–º–µ—Ä –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–≤—Å–µ –ø–æ–ª—è)
- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤–æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–∞—Ö
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—è–º (—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –∏–º–µ—é—Ç –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ)
""")

print("\n" + "="*100)
